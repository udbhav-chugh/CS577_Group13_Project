// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv3x3b (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        line_buffer_m_V_address0,
        line_buffer_m_V_ce0,
        line_buffer_m_V_q0,
        line_buffer_m_V_address1,
        line_buffer_m_V_ce1,
        line_buffer_m_V_q1,
        line_buffer_m_V_offset,
        conv_params_m_0_0_s,
        conv_params_m_0_0_10,
        conv_params_m_0_1_s,
        conv_params_m_0_1_10,
        conv_params_m_0_2_s,
        conv_params_m_0_2_10,
        conv_params_m_1_0_s,
        conv_params_m_1_0_10,
        conv_params_m_1_1_s,
        conv_params_m_1_1_10,
        conv_params_m_1_2_s,
        conv_params_m_1_2_10,
        conv_params_m_2_0_s,
        conv_params_m_2_0_10,
        conv_params_m_2_1_s,
        conv_params_m_2_1_10,
        conv_params_m_2_2_s,
        conv_params_m_2_2_10,
        conv_params_m_V_offset,
        bank_V,
        cc_V,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 5'd1;
parameter    ap_ST_fsm_pp0_stage1 = 5'd2;
parameter    ap_ST_fsm_pp0_stage2 = 5'd4;
parameter    ap_ST_fsm_pp0_stage3 = 5'd8;
parameter    ap_ST_fsm_pp0_stage4 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
output  [8:0] line_buffer_m_V_address0;
output   line_buffer_m_V_ce0;
input  [1:0] line_buffer_m_V_q0;
output  [8:0] line_buffer_m_V_address1;
output   line_buffer_m_V_ce1;
input  [1:0] line_buffer_m_V_q1;
input  [0:0] line_buffer_m_V_offset;
input  [0:0] conv_params_m_0_0_s;
input  [0:0] conv_params_m_0_0_10;
input  [0:0] conv_params_m_0_1_s;
input  [0:0] conv_params_m_0_1_10;
input  [0:0] conv_params_m_0_2_s;
input  [0:0] conv_params_m_0_2_10;
input  [0:0] conv_params_m_1_0_s;
input  [0:0] conv_params_m_1_0_10;
input  [0:0] conv_params_m_1_1_s;
input  [0:0] conv_params_m_1_1_10;
input  [0:0] conv_params_m_1_2_s;
input  [0:0] conv_params_m_1_2_10;
input  [0:0] conv_params_m_2_0_s;
input  [0:0] conv_params_m_2_0_10;
input  [0:0] conv_params_m_2_1_s;
input  [0:0] conv_params_m_2_1_10;
input  [0:0] conv_params_m_2_2_s;
input  [0:0] conv_params_m_2_2_10;
input  [0:0] conv_params_m_V_offset;
input  [3:0] bank_V;
input  [3:0] cc_V;
output  [4:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[8:0] line_buffer_m_V_address0;
reg line_buffer_m_V_ce0;
reg[8:0] line_buffer_m_V_address1;
reg line_buffer_m_V_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [3:0] cc_V_read_reg_937;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] sub_ln74_fu_339_p2;
reg   [9:0] sub_ln74_reg_942;
wire   [9:0] zext_ln74_2_fu_345_p1;
reg   [9:0] zext_ln74_2_reg_949;
wire   [9:0] zext_ln74_6_fu_366_p1;
reg   [9:0] zext_ln74_6_reg_960;
reg   [0:0] conv_params_m_V_offs_reg_971;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [9:0] add_ln74_1_fu_381_p2;
reg   [9:0] add_ln74_1_reg_982;
wire   [9:0] zext_ln74_10_fu_493_p1;
reg   [9:0] zext_ln74_10_reg_993;
wire   [2:0] add_ln700_fu_507_p2;
reg   [2:0] add_ln700_reg_1004;
wire   [9:0] add_ln74_5_fu_518_p2;
reg   [9:0] add_ln74_5_reg_1009;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [9:0] add_ln74_8_fu_532_p2;
reg   [9:0] add_ln74_8_reg_1019;
wire   [9:0] add_ln74_11_fu_546_p2;
reg   [9:0] add_ln74_11_reg_1029;
wire   [3:0] add_ln700_4_fu_654_p2;
reg   [3:0] add_ln700_4_reg_1034;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [2:0] add_ln700_5_fu_758_p2;
reg   [2:0] add_ln700_5_reg_1049;
reg   [0:0] conv_params_m_0_0_11_reg_1054;
reg   [0:0] conv_params_m_0_0_12_reg_1059;
reg   [1:0] tmp_68_fu_799_p4;
reg   [1:0] tmp_68_reg_1069;
reg   [1:0] tmp_70_fu_840_p4;
reg   [1:0] tmp_70_reg_1074;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage4_subdone;
reg   [0:0] ap_port_reg_conv_params_m_0_0_s;
reg   [0:0] ap_port_reg_conv_params_m_0_0_10;
reg   [0:0] ap_port_reg_conv_params_m_0_1_s;
reg   [0:0] ap_port_reg_conv_params_m_0_1_10;
reg   [0:0] ap_port_reg_conv_params_m_0_2_s;
reg   [0:0] ap_port_reg_conv_params_m_0_2_10;
reg   [0:0] ap_port_reg_conv_params_m_1_0_s;
reg   [0:0] ap_port_reg_conv_params_m_1_0_10;
reg   [0:0] ap_port_reg_conv_params_m_1_1_s;
reg   [0:0] ap_port_reg_conv_params_m_1_1_10;
reg   [0:0] ap_port_reg_conv_params_m_1_2_s;
reg   [0:0] ap_port_reg_conv_params_m_1_2_10;
reg   [0:0] ap_port_reg_conv_params_m_2_0_s;
reg   [0:0] ap_port_reg_conv_params_m_2_0_10;
reg   [0:0] ap_port_reg_conv_params_m_2_1_s;
reg   [0:0] ap_port_reg_conv_params_m_2_1_10;
reg   [0:0] ap_port_reg_conv_params_m_2_2_s;
reg   [0:0] ap_port_reg_conv_params_m_2_2_10;
reg   [0:0] ap_port_reg_conv_params_m_V_offset;
wire   [63:0] zext_ln74_3_fu_355_p1;
wire   [63:0] zext_ln74_7_fu_376_p1;
wire   [63:0] zext_ln74_4_fu_391_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln74_11_fu_502_p1;
wire   [63:0] zext_ln74_8_fu_527_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln74_12_fu_541_p1;
wire   [63:0] zext_ln74_5_fu_660_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln74_9_fu_664_p1;
wire   [63:0] zext_ln74_13_fu_764_p1;
wire    ap_block_pp0_stage4;
wire   [3:0] tmp_fu_297_p3;
wire   [4:0] zext_ln74_fu_309_p1;
wire   [4:0] zext_ln74_cast_fu_305_p1;
wire   [4:0] add_ln74_fu_313_p2;
wire   [5:0] tmp_54_fu_327_p3;
wire   [9:0] p_shl_cast_fu_319_p3;
wire   [9:0] zext_ln74_1_fu_335_p1;
wire   [9:0] add_ln74_3_fu_349_p2;
wire   [3:0] add_ln1353_fu_360_p2;
wire   [9:0] add_ln74_6_fu_370_p2;
wire   [9:0] add_ln74_4_fu_386_p2;
wire   [0:0] trunc_ln215_fu_396_p1;
wire   [0:0] select_ln215_fu_400_p3;
wire   [0:0] and_ln1355_fu_408_p2;
wire   [0:0] tmp_55_fu_414_p3;
wire   [0:0] xor_ln841_fu_422_p2;
reg   [1:0] tmp_56_fu_428_p4;
wire   [0:0] trunc_ln215_1_fu_442_p1;
wire   [0:0] select_ln215_1_fu_446_p3;
wire   [0:0] and_ln1355_1_fu_454_p2;
wire   [0:0] tmp_57_fu_460_p3;
wire   [0:0] xor_ln841_1_fu_468_p2;
reg   [1:0] tmp_58_fu_474_p4;
wire   [3:0] add_ln1353_14_fu_488_p2;
wire   [9:0] add_ln74_9_fu_497_p2;
wire  signed [2:0] sext_ln1353_fu_438_p1;
wire  signed [2:0] sext_ln1353_1_fu_484_p1;
wire   [9:0] add_ln74_2_fu_513_p2;
wire   [9:0] add_ln74_7_fu_523_p2;
wire   [9:0] add_ln74_10_fu_537_p2;
wire   [0:0] trunc_ln215_2_fu_551_p1;
wire   [0:0] select_ln215_2_fu_555_p3;
wire   [0:0] and_ln1355_2_fu_562_p2;
wire   [0:0] tmp_59_fu_568_p3;
wire   [0:0] xor_ln841_2_fu_576_p2;
reg   [1:0] tmp_60_fu_582_p4;
wire   [0:0] trunc_ln215_3_fu_596_p1;
wire   [0:0] select_ln215_3_fu_600_p3;
wire   [0:0] and_ln1355_3_fu_607_p2;
wire   [0:0] tmp_61_fu_613_p3;
wire   [0:0] xor_ln841_3_fu_621_p2;
reg   [1:0] tmp_62_fu_627_p4;
wire  signed [2:0] sext_ln74_fu_592_p1;
wire  signed [2:0] sext_ln74_1_fu_637_p1;
wire   [2:0] add_ln700_3_fu_644_p2;
wire  signed [3:0] sext_ln700_2_fu_650_p1;
wire  signed [3:0] sext_ln700_1_fu_641_p1;
wire   [0:0] trunc_ln215_4_fu_668_p1;
wire   [0:0] select_ln215_4_fu_672_p3;
wire   [0:0] and_ln1355_4_fu_679_p2;
wire   [0:0] tmp_63_fu_685_p3;
wire   [0:0] xor_ln841_4_fu_693_p2;
reg   [1:0] tmp_64_fu_699_p4;
wire   [0:0] trunc_ln215_5_fu_713_p1;
wire   [0:0] select_ln215_5_fu_717_p3;
wire   [0:0] and_ln1355_5_fu_724_p2;
wire   [0:0] tmp_65_fu_730_p3;
wire   [0:0] xor_ln841_5_fu_738_p2;
reg   [1:0] tmp_66_fu_744_p4;
wire  signed [2:0] sext_ln74_2_fu_709_p1;
wire  signed [2:0] sext_ln74_3_fu_754_p1;
wire   [0:0] trunc_ln215_6_fu_768_p1;
wire   [0:0] select_ln215_6_fu_772_p3;
wire   [0:0] and_ln1355_6_fu_779_p2;
wire   [0:0] tmp_67_fu_785_p3;
wire   [0:0] xor_ln841_6_fu_793_p2;
wire   [0:0] trunc_ln215_7_fu_809_p1;
wire   [0:0] select_ln215_7_fu_813_p3;
wire   [0:0] and_ln1355_7_fu_820_p2;
wire   [0:0] tmp_69_fu_826_p3;
wire   [0:0] xor_ln841_7_fu_834_p2;
wire   [0:0] trunc_ln215_8_fu_856_p1;
wire   [0:0] select_ln215_8_fu_860_p3;
wire   [0:0] and_ln1355_8_fu_865_p2;
wire   [0:0] tmp_71_fu_871_p3;
wire   [0:0] xor_ln841_8_fu_879_p2;
reg   [1:0] tmp_72_fu_885_p4;
wire  signed [2:0] sext_ln74_5_fu_853_p1;
wire  signed [2:0] sext_ln700_fu_895_p1;
wire   [2:0] add_ln700_6_fu_905_p2;
wire  signed [3:0] sext_ln700_5_fu_911_p1;
wire  signed [3:0] sext_ln74_4_fu_850_p1;
wire   [3:0] add_ln700_7_fu_915_p2;
wire  signed [4:0] sext_ln700_6_fu_921_p1;
wire  signed [4:0] sext_ln700_4_fu_902_p1;
wire   [4:0] add_ln700_8_fu_925_p2;
wire  signed [4:0] sext_ln700_3_fu_899_p1;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        add_ln700_4_reg_1034 <= add_ln700_4_fu_654_p2;
        add_ln74_11_reg_1029 <= add_ln74_11_fu_546_p2;
        add_ln74_5_reg_1009 <= add_ln74_5_fu_518_p2;
        add_ln74_8_reg_1019 <= add_ln74_8_fu_532_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln700_5_reg_1049 <= add_ln700_5_fu_758_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln700_reg_1004 <= add_ln700_fu_507_p2;
        add_ln74_1_reg_982[9 : 1] <= add_ln74_1_fu_381_p2[9 : 1];
        conv_params_m_V_offs_reg_971 <= ap_port_reg_conv_params_m_V_offset;
        zext_ln74_10_reg_993[3 : 0] <= zext_ln74_10_fu_493_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_port_reg_conv_params_m_0_0_10 <= conv_params_m_0_0_10;
        ap_port_reg_conv_params_m_0_0_s <= conv_params_m_0_0_s;
        ap_port_reg_conv_params_m_0_1_10 <= conv_params_m_0_1_10;
        ap_port_reg_conv_params_m_0_1_s <= conv_params_m_0_1_s;
        ap_port_reg_conv_params_m_0_2_10 <= conv_params_m_0_2_10;
        ap_port_reg_conv_params_m_0_2_s <= conv_params_m_0_2_s;
        ap_port_reg_conv_params_m_1_0_10 <= conv_params_m_1_0_10;
        ap_port_reg_conv_params_m_1_0_s <= conv_params_m_1_0_s;
        ap_port_reg_conv_params_m_1_1_10 <= conv_params_m_1_1_10;
        ap_port_reg_conv_params_m_1_1_s <= conv_params_m_1_1_s;
        ap_port_reg_conv_params_m_1_2_10 <= conv_params_m_1_2_10;
        ap_port_reg_conv_params_m_1_2_s <= conv_params_m_1_2_s;
        ap_port_reg_conv_params_m_2_0_10 <= conv_params_m_2_0_10;
        ap_port_reg_conv_params_m_2_0_s <= conv_params_m_2_0_s;
        ap_port_reg_conv_params_m_2_1_10 <= conv_params_m_2_1_10;
        ap_port_reg_conv_params_m_2_1_s <= conv_params_m_2_1_s;
        ap_port_reg_conv_params_m_2_2_10 <= conv_params_m_2_2_10;
        ap_port_reg_conv_params_m_2_2_s <= conv_params_m_2_2_s;
        ap_port_reg_conv_params_m_V_offset <= conv_params_m_V_offset;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        cc_V_read_reg_937 <= cc_V;
        sub_ln74_reg_942[9 : 1] <= sub_ln74_fu_339_p2[9 : 1];
        zext_ln74_2_reg_949[3 : 0] <= zext_ln74_2_fu_345_p1[3 : 0];
        zext_ln74_6_reg_960[3 : 0] <= zext_ln74_6_fu_366_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        conv_params_m_0_0_11_reg_1054 <= ap_port_reg_conv_params_m_0_0_10;
        conv_params_m_0_0_12_reg_1059 <= ap_port_reg_conv_params_m_0_0_s;
        tmp_68_reg_1069 <= tmp_68_fu_799_p4;
        tmp_70_reg_1074 <= tmp_70_fu_840_p4;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            line_buffer_m_V_address0 = zext_ln74_13_fu_764_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            line_buffer_m_V_address0 = zext_ln74_5_fu_660_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            line_buffer_m_V_address0 = zext_ln74_8_fu_527_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buffer_m_V_address0 = zext_ln74_11_fu_502_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            line_buffer_m_V_address0 = zext_ln74_3_fu_355_p1;
        end else begin
            line_buffer_m_V_address0 = 'bx;
        end
    end else begin
        line_buffer_m_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            line_buffer_m_V_address1 = zext_ln74_9_fu_664_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            line_buffer_m_V_address1 = zext_ln74_12_fu_541_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            line_buffer_m_V_address1 = zext_ln74_4_fu_391_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            line_buffer_m_V_address1 = zext_ln74_7_fu_376_p1;
        end else begin
            line_buffer_m_V_address1 = 'bx;
        end
    end else begin
        line_buffer_m_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        line_buffer_m_V_ce0 = 1'b1;
    end else begin
        line_buffer_m_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        line_buffer_m_V_ce1 = 1'b1;
    end else begin
        line_buffer_m_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1353_14_fu_488_p2 = (4'd2 + cc_V_read_reg_937);

assign add_ln1353_fu_360_p2 = (4'd1 + cc_V);

assign add_ln700_3_fu_644_p2 = ($signed(sext_ln74_fu_592_p1) + $signed(sext_ln74_1_fu_637_p1));

assign add_ln700_4_fu_654_p2 = ($signed(sext_ln700_2_fu_650_p1) + $signed(sext_ln700_1_fu_641_p1));

assign add_ln700_5_fu_758_p2 = ($signed(sext_ln74_2_fu_709_p1) + $signed(sext_ln74_3_fu_754_p1));

assign add_ln700_6_fu_905_p2 = ($signed(sext_ln74_5_fu_853_p1) + $signed(sext_ln700_fu_895_p1));

assign add_ln700_7_fu_915_p2 = ($signed(sext_ln700_5_fu_911_p1) + $signed(sext_ln74_4_fu_850_p1));

assign add_ln700_8_fu_925_p2 = ($signed(sext_ln700_6_fu_921_p1) + $signed(sext_ln700_4_fu_902_p1));

assign add_ln700_fu_507_p2 = ($signed(sext_ln1353_fu_438_p1) + $signed(sext_ln1353_1_fu_484_p1));

assign add_ln74_10_fu_537_p2 = (zext_ln74_10_reg_993 + add_ln74_1_reg_982);

assign add_ln74_11_fu_546_p2 = (zext_ln74_10_reg_993 + add_ln74_2_fu_513_p2);

assign add_ln74_1_fu_381_p2 = (10'd10 + sub_ln74_reg_942);

assign add_ln74_2_fu_513_p2 = (10'd20 + sub_ln74_reg_942);

assign add_ln74_3_fu_349_p2 = (zext_ln74_2_fu_345_p1 + sub_ln74_fu_339_p2);

assign add_ln74_4_fu_386_p2 = (zext_ln74_2_reg_949 + add_ln74_1_fu_381_p2);

assign add_ln74_5_fu_518_p2 = (zext_ln74_2_reg_949 + add_ln74_2_fu_513_p2);

assign add_ln74_6_fu_370_p2 = (zext_ln74_6_fu_366_p1 + sub_ln74_fu_339_p2);

assign add_ln74_7_fu_523_p2 = (zext_ln74_6_reg_960 + add_ln74_1_reg_982);

assign add_ln74_8_fu_532_p2 = (zext_ln74_6_reg_960 + add_ln74_2_fu_513_p2);

assign add_ln74_9_fu_497_p2 = (zext_ln74_10_fu_493_p1 + sub_ln74_reg_942);

assign add_ln74_fu_313_p2 = (zext_ln74_fu_309_p1 + zext_ln74_cast_fu_305_p1);

assign and_ln1355_1_fu_454_p2 = (trunc_ln215_1_fu_442_p1 & select_ln215_1_fu_446_p3);

assign and_ln1355_2_fu_562_p2 = (trunc_ln215_2_fu_551_p1 & select_ln215_2_fu_555_p3);

assign and_ln1355_3_fu_607_p2 = (trunc_ln215_3_fu_596_p1 & select_ln215_3_fu_600_p3);

assign and_ln1355_4_fu_679_p2 = (trunc_ln215_4_fu_668_p1 & select_ln215_4_fu_672_p3);

assign and_ln1355_5_fu_724_p2 = (trunc_ln215_5_fu_713_p1 & select_ln215_5_fu_717_p3);

assign and_ln1355_6_fu_779_p2 = (trunc_ln215_6_fu_768_p1 & select_ln215_6_fu_772_p3);

assign and_ln1355_7_fu_820_p2 = (trunc_ln215_7_fu_809_p1 & select_ln215_7_fu_813_p3);

assign and_ln1355_8_fu_865_p2 = (trunc_ln215_8_fu_856_p1 & select_ln215_8_fu_860_p3);

assign and_ln1355_fu_408_p2 = (trunc_ln215_fu_396_p1 & select_ln215_fu_400_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_subdone = (1'b0 == ap_ce);
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = ($signed(add_ln700_8_fu_925_p2) + $signed(sext_ln700_3_fu_899_p1));

assign p_shl_cast_fu_319_p3 = {{add_ln74_fu_313_p2}, {5'd0}};

assign select_ln215_1_fu_446_p3 = ((ap_port_reg_conv_params_m_V_offset[0:0] === 1'b1) ? ap_port_reg_conv_params_m_2_1_10 : ap_port_reg_conv_params_m_2_1_s);

assign select_ln215_2_fu_555_p3 = ((conv_params_m_V_offs_reg_971[0:0] === 1'b1) ? ap_port_reg_conv_params_m_2_0_10 : ap_port_reg_conv_params_m_2_0_s);

assign select_ln215_3_fu_600_p3 = ((conv_params_m_V_offs_reg_971[0:0] === 1'b1) ? ap_port_reg_conv_params_m_1_2_10 : ap_port_reg_conv_params_m_1_2_s);

assign select_ln215_4_fu_672_p3 = ((conv_params_m_V_offs_reg_971[0:0] === 1'b1) ? ap_port_reg_conv_params_m_1_1_10 : ap_port_reg_conv_params_m_1_1_s);

assign select_ln215_5_fu_717_p3 = ((conv_params_m_V_offs_reg_971[0:0] === 1'b1) ? ap_port_reg_conv_params_m_1_0_10 : ap_port_reg_conv_params_m_1_0_s);

assign select_ln215_6_fu_772_p3 = ((conv_params_m_V_offs_reg_971[0:0] === 1'b1) ? ap_port_reg_conv_params_m_0_2_10 : ap_port_reg_conv_params_m_0_2_s);

assign select_ln215_7_fu_813_p3 = ((conv_params_m_V_offs_reg_971[0:0] === 1'b1) ? ap_port_reg_conv_params_m_0_1_10 : ap_port_reg_conv_params_m_0_1_s);

assign select_ln215_8_fu_860_p3 = ((conv_params_m_V_offs_reg_971[0:0] === 1'b1) ? conv_params_m_0_0_11_reg_1054 : conv_params_m_0_0_12_reg_1059);

assign select_ln215_fu_400_p3 = ((ap_port_reg_conv_params_m_V_offset[0:0] === 1'b1) ? ap_port_reg_conv_params_m_2_2_10 : ap_port_reg_conv_params_m_2_2_s);

assign sext_ln1353_1_fu_484_p1 = $signed(tmp_58_fu_474_p4);

assign sext_ln1353_fu_438_p1 = $signed(tmp_56_fu_428_p4);

assign sext_ln700_1_fu_641_p1 = $signed(add_ln700_reg_1004);

assign sext_ln700_2_fu_650_p1 = $signed(add_ln700_3_fu_644_p2);

assign sext_ln700_3_fu_899_p1 = $signed(add_ln700_4_reg_1034);

assign sext_ln700_4_fu_902_p1 = $signed(add_ln700_5_reg_1049);

assign sext_ln700_5_fu_911_p1 = $signed(add_ln700_6_fu_905_p2);

assign sext_ln700_6_fu_921_p1 = $signed(add_ln700_7_fu_915_p2);

assign sext_ln700_fu_895_p1 = $signed(tmp_72_fu_885_p4);

assign sext_ln74_1_fu_637_p1 = $signed(tmp_62_fu_627_p4);

assign sext_ln74_2_fu_709_p1 = $signed(tmp_64_fu_699_p4);

assign sext_ln74_3_fu_754_p1 = $signed(tmp_66_fu_744_p4);

assign sext_ln74_4_fu_850_p1 = $signed(tmp_68_reg_1069);

assign sext_ln74_5_fu_853_p1 = $signed(tmp_70_reg_1074);

assign sext_ln74_fu_592_p1 = $signed(tmp_60_fu_582_p4);

assign sub_ln74_fu_339_p2 = (p_shl_cast_fu_319_p3 - zext_ln74_1_fu_335_p1);

assign tmp_54_fu_327_p3 = {{add_ln74_fu_313_p2}, {1'd0}};

assign tmp_55_fu_414_p3 = line_buffer_m_V_q0[32'd1];

always @ (*) begin
    tmp_56_fu_428_p4 = line_buffer_m_V_q0;
    tmp_56_fu_428_p4[32'd1] = |(xor_ln841_fu_422_p2);
end

assign tmp_57_fu_460_p3 = line_buffer_m_V_q1[32'd1];

always @ (*) begin
    tmp_58_fu_474_p4 = line_buffer_m_V_q1;
    tmp_58_fu_474_p4[32'd1] = |(xor_ln841_1_fu_468_p2);
end

assign tmp_59_fu_568_p3 = line_buffer_m_V_q0[32'd1];

always @ (*) begin
    tmp_60_fu_582_p4 = line_buffer_m_V_q0;
    tmp_60_fu_582_p4[32'd1] = |(xor_ln841_2_fu_576_p2);
end

assign tmp_61_fu_613_p3 = line_buffer_m_V_q1[32'd1];

always @ (*) begin
    tmp_62_fu_627_p4 = line_buffer_m_V_q1;
    tmp_62_fu_627_p4[32'd1] = |(xor_ln841_3_fu_621_p2);
end

assign tmp_63_fu_685_p3 = line_buffer_m_V_q0[32'd1];

always @ (*) begin
    tmp_64_fu_699_p4 = line_buffer_m_V_q0;
    tmp_64_fu_699_p4[32'd1] = |(xor_ln841_4_fu_693_p2);
end

assign tmp_65_fu_730_p3 = line_buffer_m_V_q1[32'd1];

always @ (*) begin
    tmp_66_fu_744_p4 = line_buffer_m_V_q1;
    tmp_66_fu_744_p4[32'd1] = |(xor_ln841_5_fu_738_p2);
end

assign tmp_67_fu_785_p3 = line_buffer_m_V_q0[32'd1];

always @ (*) begin
    tmp_68_fu_799_p4 = line_buffer_m_V_q0;
    tmp_68_fu_799_p4[32'd1] = |(xor_ln841_6_fu_793_p2);
end

assign tmp_69_fu_826_p3 = line_buffer_m_V_q1[32'd1];

always @ (*) begin
    tmp_70_fu_840_p4 = line_buffer_m_V_q1;
    tmp_70_fu_840_p4[32'd1] = |(xor_ln841_7_fu_834_p2);
end

assign tmp_71_fu_871_p3 = line_buffer_m_V_q0[32'd1];

always @ (*) begin
    tmp_72_fu_885_p4 = line_buffer_m_V_q0;
    tmp_72_fu_885_p4[32'd1] = |(xor_ln841_8_fu_879_p2);
end

assign tmp_fu_297_p3 = {{line_buffer_m_V_offset}, {3'd0}};

assign trunc_ln215_1_fu_442_p1 = line_buffer_m_V_q1[0:0];

assign trunc_ln215_2_fu_551_p1 = line_buffer_m_V_q0[0:0];

assign trunc_ln215_3_fu_596_p1 = line_buffer_m_V_q1[0:0];

assign trunc_ln215_4_fu_668_p1 = line_buffer_m_V_q0[0:0];

assign trunc_ln215_5_fu_713_p1 = line_buffer_m_V_q1[0:0];

assign trunc_ln215_6_fu_768_p1 = line_buffer_m_V_q0[0:0];

assign trunc_ln215_7_fu_809_p1 = line_buffer_m_V_q1[0:0];

assign trunc_ln215_8_fu_856_p1 = line_buffer_m_V_q0[0:0];

assign trunc_ln215_fu_396_p1 = line_buffer_m_V_q0[0:0];

assign xor_ln841_1_fu_468_p2 = (tmp_57_fu_460_p3 ^ and_ln1355_1_fu_454_p2);

assign xor_ln841_2_fu_576_p2 = (tmp_59_fu_568_p3 ^ and_ln1355_2_fu_562_p2);

assign xor_ln841_3_fu_621_p2 = (tmp_61_fu_613_p3 ^ and_ln1355_3_fu_607_p2);

assign xor_ln841_4_fu_693_p2 = (tmp_63_fu_685_p3 ^ and_ln1355_4_fu_679_p2);

assign xor_ln841_5_fu_738_p2 = (tmp_65_fu_730_p3 ^ and_ln1355_5_fu_724_p2);

assign xor_ln841_6_fu_793_p2 = (tmp_67_fu_785_p3 ^ and_ln1355_6_fu_779_p2);

assign xor_ln841_7_fu_834_p2 = (tmp_69_fu_826_p3 ^ and_ln1355_7_fu_820_p2);

assign xor_ln841_8_fu_879_p2 = (tmp_71_fu_871_p3 ^ and_ln1355_8_fu_865_p2);

assign xor_ln841_fu_422_p2 = (tmp_55_fu_414_p3 ^ and_ln1355_fu_408_p2);

assign zext_ln74_10_fu_493_p1 = add_ln1353_14_fu_488_p2;

assign zext_ln74_11_fu_502_p1 = add_ln74_9_fu_497_p2;

assign zext_ln74_12_fu_541_p1 = add_ln74_10_fu_537_p2;

assign zext_ln74_13_fu_764_p1 = add_ln74_11_reg_1029;

assign zext_ln74_1_fu_335_p1 = tmp_54_fu_327_p3;

assign zext_ln74_2_fu_345_p1 = cc_V;

assign zext_ln74_3_fu_355_p1 = add_ln74_3_fu_349_p2;

assign zext_ln74_4_fu_391_p1 = add_ln74_4_fu_386_p2;

assign zext_ln74_5_fu_660_p1 = add_ln74_5_reg_1009;

assign zext_ln74_6_fu_366_p1 = add_ln1353_fu_360_p2;

assign zext_ln74_7_fu_376_p1 = add_ln74_6_fu_370_p2;

assign zext_ln74_8_fu_527_p1 = add_ln74_7_fu_523_p2;

assign zext_ln74_9_fu_664_p1 = add_ln74_8_reg_1019;

assign zext_ln74_cast_fu_305_p1 = tmp_fu_297_p3;

assign zext_ln74_fu_309_p1 = bank_V;

always @ (posedge ap_clk) begin
    sub_ln74_reg_942[0] <= 1'b0;
    zext_ln74_2_reg_949[9:4] <= 6'b000000;
    zext_ln74_6_reg_960[9:4] <= 6'b000000;
    add_ln74_1_reg_982[0] <= 1'b0;
    zext_ln74_10_reg_993[9:4] <= 6'b000000;
end

endmodule //conv3x3b
