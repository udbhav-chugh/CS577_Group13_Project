-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_word is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    line_buffer_m_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    line_buffer_m_V_ce0 : OUT STD_LOGIC;
    line_buffer_m_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    line_buffer_m_V_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    conv_params_m_V_ce0 : OUT STD_LOGIC;
    conv_params_m_V_q0 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_out_buffer_m_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    conv_out_buffer_m_V_ce0 : OUT STD_LOGIC;
    conv_out_buffer_m_V_we0 : OUT STD_LOGIC;
    conv_out_buffer_m_V_d0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of conv_word is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal zext_ln215_3_fu_206_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln215_3_reg_503 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln215_fu_210_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln215_reg_508 : STD_LOGIC_VECTOR (3 downto 0);
    signal bank_V_fu_224_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bank_V_reg_516 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ret_V_fu_234_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_reg_521 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln86_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln69_fu_267_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln69_reg_526 : STD_LOGIC_VECTOR (63 downto 0);
    signal cc_V_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal cc_V_reg_534 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal conv_out_buffer_m_V_s_reg_539 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln87_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kr_V_fu_312_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kr_V_reg_547 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln69_2_fu_351_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln69_2_reg_552 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln887_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln215_fu_388_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln215_reg_557 : STD_LOGIC_VECTOR (5 downto 0);
    signal kc_V_fu_400_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_V_reg_565 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln887_3_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_V_fu_492_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_0_reg_104 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_084_0_reg_115 : STD_LOGIC_VECTOR (3 downto 0);
    signal agg_result_V_0_i_reg_127 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_V_load1_i_reg_140 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_097_0_i_reg_152 : STD_LOGIC_VECTOR (1 downto 0);
    signal agg_result_V_1_i_reg_163 : STD_LOGIC_VECTOR (4 downto 0);
    signal agg_result_V_load_i_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_087_0_i_reg_187 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln180_fu_301_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_4_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_4_fu_449_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_198_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln1352_fu_230_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln69_fu_242_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln69_fu_246_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_255_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln69_2_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln69_1_fu_251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln215_fu_285_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_11_fu_289_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_294_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln544_fu_318_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln69_1_fu_322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln69_fu_327_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln69_1_fu_339_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_331_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl3_cast_fu_343_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1354_fu_357_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_14_fu_361_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln215_fu_367_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln215_fu_371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl1_cast_fu_380_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln215_1_fu_376_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln215_1_fu_406_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ret_V_12_fu_410_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln69_3_fu_416_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln69_3_fu_420_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln215_2_fu_430_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ret_V_13_fu_434_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln215_2_fu_440_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln215_1_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln69_2_fu_454_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_16_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_478_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln700_fu_488_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    agg_result_V_0_i_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_3_fu_394_p2 = ap_const_lv1_1))) then 
                agg_result_V_0_i_reg_127 <= agg_result_V_1_i_reg_163;
            elsif (((icmp_ln87_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                agg_result_V_0_i_reg_127 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    agg_result_V_1_i_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                agg_result_V_1_i_reg_163 <= sum_V_fu_492_p2;
            elsif (((icmp_ln887_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                agg_result_V_1_i_reg_163 <= agg_result_V_0_i_reg_127;
            end if; 
        end if;
    end process;

    agg_result_V_load1_i_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_3_fu_394_p2 = ap_const_lv1_1))) then 
                agg_result_V_load1_i_reg_140 <= agg_result_V_load_i_reg_175;
            elsif (((icmp_ln87_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                agg_result_V_load1_i_reg_140 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    agg_result_V_load_i_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                agg_result_V_load_i_reg_175 <= sum_V_fu_492_p2;
            elsif (((icmp_ln887_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                agg_result_V_load_i_reg_175 <= agg_result_V_load1_i_reg_140;
            end if; 
        end if;
    end process;

    p_084_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_084_0_reg_115 <= ap_const_lv4_0;
            elsif (((icmp_ln887_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_084_0_reg_115 <= cc_V_reg_534;
            end if; 
        end if;
    end process;

    p_087_0_i_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_087_0_i_reg_187 <= kc_V_reg_565;
            elsif (((icmp_ln887_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_087_0_i_reg_187 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_097_0_i_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_3_fu_394_p2 = ap_const_lv1_1))) then 
                p_097_0_i_reg_152 <= kr_V_reg_547;
            elsif (((icmp_ln87_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_097_0_i_reg_152 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    p_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_0_reg_104 <= bank_V_reg_516;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0_reg_104 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    add_ln69_2_reg_552(9 downto 1) <= add_ln69_2_fu_351_p2(9 downto 1);
                sub_ln215_reg_557 <= sub_ln215_fu_388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                bank_V_reg_516 <= bank_V_fu_224_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                cc_V_reg_534 <= cc_V_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_273_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                conv_out_buffer_m_V_s_reg_539 <= zext_ln180_fu_301_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kc_V_reg_565 <= kc_V_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kr_V_reg_547 <= kr_V_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln86_fu_218_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ret_V_reg_521(5 downto 3) <= ret_V_fu_234_p3(5 downto 3);
                sub_ln69_reg_526 <= sub_ln69_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    select_ln215_reg_508(1 downto 0) <= select_ln215_fu_210_p3(1 downto 0);
                    zext_ln215_3_reg_503(3) <= zext_ln215_3_fu_206_p1(3);
            end if;
        end if;
    end process;
    zext_ln215_3_reg_503(2 downto 0) <= "000";
    zext_ln215_3_reg_503(4) <= '0';
    select_ln215_reg_508(3 downto 2) <= "00";
    ret_V_reg_521(2 downto 0) <= "000";
    add_ln69_2_reg_552(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln86_fu_218_p2, ap_CS_fsm_state3, icmp_ln87_fu_273_p2, ap_CS_fsm_state4, icmp_ln887_fu_306_p2, ap_CS_fsm_state5, icmp_ln887_3_fu_394_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln86_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln87_fu_273_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln887_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln887_3_fu_394_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln215_1_fu_444_p2 <= std_logic_vector(signed(sext_ln215_2_fu_440_p1) + signed(sub_ln215_reg_557));
    add_ln215_fu_371_p2 <= std_logic_vector(signed(sext_ln215_fu_367_p1) + signed(select_ln215_reg_508));
    add_ln69_1_fu_322_p2 <= std_logic_vector(unsigned(zext_ln544_fu_318_p1) + unsigned(sub_ln69_reg_526));
    add_ln69_2_fu_351_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_331_p3) + unsigned(p_shl3_cast_fu_343_p3));
    add_ln69_3_fu_420_p2 <= std_logic_vector(unsigned(zext_ln69_3_fu_416_p1) + unsigned(add_ln69_2_reg_552));
    add_ln69_fu_246_p2 <= std_logic_vector(unsigned(zext_ln69_fu_242_p1) + unsigned(zext_ln215_3_reg_503));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln86_fu_218_p2)
    begin
        if ((((icmp_ln86_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln86_fu_218_p2)
    begin
        if (((icmp_ln86_fu_218_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bank_V_fu_224_p2 <= std_logic_vector(unsigned(p_0_reg_104) + unsigned(ap_const_lv4_1));
    cc_V_fu_279_p2 <= std_logic_vector(unsigned(p_084_0_reg_115) + unsigned(ap_const_lv4_1));
    conv_out_buffer_m_V_address0 <= conv_out_buffer_m_V_s_reg_539;

    conv_out_buffer_m_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_out_buffer_m_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_buffer_m_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_buffer_m_V_d0 <= agg_result_V_0_i_reg_127;

    conv_out_buffer_m_V_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln887_fu_306_p2)
    begin
        if (((icmp_ln887_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            conv_out_buffer_m_V_we0 <= ap_const_logic_1;
        else 
            conv_out_buffer_m_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_params_m_V_address0 <= zext_ln215_4_fu_449_p1(5 - 1 downto 0);

    conv_params_m_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_params_m_V_ce0 <= ap_const_logic_1;
        else 
            conv_params_m_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln86_fu_218_p2 <= "1" when (p_0_reg_104 = ap_const_lv4_8) else "0";
    icmp_ln87_fu_273_p2 <= "1" when (p_084_0_reg_115 = ap_const_lv4_8) else "0";
    icmp_ln887_3_fu_394_p2 <= "1" when (p_087_0_i_reg_187 = ap_const_lv2_3) else "0";
    icmp_ln887_fu_306_p2 <= "1" when (p_097_0_i_reg_152 = ap_const_lv2_3) else "0";
    kc_V_fu_400_p2 <= std_logic_vector(unsigned(p_087_0_i_reg_187) + unsigned(ap_const_lv2_1));
    kr_V_fu_312_p2 <= std_logic_vector(unsigned(p_097_0_i_reg_152) + unsigned(ap_const_lv2_1));
    line_buffer_m_V_address0 <= zext_ln69_4_fu_425_p1(9 - 1 downto 0);

    line_buffer_m_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            line_buffer_m_V_ce0 <= ap_const_logic_1;
        else 
            line_buffer_m_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    p_Result_s_fu_478_p4_proc : process(line_buffer_m_V_q0, xor_ln841_fu_472_p2)
    begin
        p_Result_s_fu_478_p4 <= line_buffer_m_V_q0;
        p_Result_s_fu_478_p4(1) <= xor_ln841_fu_472_p2(0);
    end process;

    p_shl1_cast_fu_380_p3 <= (add_ln215_fu_371_p2 & ap_const_lv2_0);
    p_shl2_cast_fu_331_p3 <= (trunc_ln69_fu_327_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_343_p3 <= (trunc_ln69_1_fu_339_p1 & ap_const_lv1_0);
    ret_V_11_fu_289_p2 <= std_logic_vector(unsigned(ret_V_reg_521) + unsigned(zext_ln215_fu_285_p1));
    ret_V_12_fu_410_p2 <= std_logic_vector(unsigned(p_084_0_reg_115) + unsigned(zext_ln215_1_fu_406_p1));
    ret_V_13_fu_434_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) - unsigned(zext_ln215_2_fu_430_p1));
    ret_V_14_fu_361_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) - unsigned(zext_ln1354_fu_357_p1));
    ret_V_16_fu_458_p2 <= (trunc_ln69_2_fu_454_p1 and conv_params_m_V_q0);
    ret_V_fu_234_p3 <= (trunc_ln1352_fu_230_p1 & ap_const_lv3_0);
    select_ln215_fu_210_p3 <= 
        ap_const_lv4_3 when (line_buffer_m_V_offset(0) = '1') else 
        ap_const_lv4_0;
        sext_ln215_1_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln215_fu_371_p2),6));

        sext_ln215_2_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_13_fu_434_p2),6));

        sext_ln215_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ret_V_14_fu_361_p2),4));

        sext_ln700_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_s_fu_478_p4),5));

    sub_ln215_fu_388_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_380_p3) - unsigned(sext_ln215_1_fu_376_p1));
    sub_ln69_fu_267_p2 <= std_logic_vector(unsigned(zext_ln69_2_fu_263_p1) - unsigned(zext_ln69_1_fu_251_p1));
    sum_V_fu_492_p2 <= std_logic_vector(signed(sext_ln700_fu_488_p1) + signed(agg_result_V_load_i_reg_175));
    tmp_16_fu_255_p3 <= (add_ln69_fu_246_p2 & ap_const_lv2_0);
    tmp_17_fu_464_p3 <= line_buffer_m_V_q0(1 downto 1);
    tmp_fu_198_p3 <= (line_buffer_m_V_offset & ap_const_lv3_0);
    tmp_s_fu_294_p3 <= (line_buffer_m_V_offset & ret_V_11_fu_289_p2);
    trunc_ln1352_fu_230_p1 <= p_0_reg_104(3 - 1 downto 0);
    trunc_ln69_1_fu_339_p1 <= add_ln69_1_fu_322_p2(9 - 1 downto 0);
    trunc_ln69_2_fu_454_p1 <= line_buffer_m_V_q0(1 - 1 downto 0);
    trunc_ln69_fu_327_p1 <= add_ln69_1_fu_322_p2(7 - 1 downto 0);
    xor_ln841_fu_472_p2 <= (tmp_17_fu_464_p3 xor ret_V_16_fu_458_p2);
    zext_ln1354_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_097_0_i_reg_152),3));
    zext_ln180_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_294_p3),64));
    zext_ln215_1_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_087_0_i_reg_187),4));
    zext_ln215_2_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_087_0_i_reg_187),3));
    zext_ln215_3_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_198_p3),5));
    zext_ln215_4_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln215_1_fu_444_p2),64));
    zext_ln215_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_084_0_reg_115),6));
    zext_ln544_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_097_0_i_reg_152),64));
    zext_ln69_1_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_fu_246_p2),64));
    zext_ln69_2_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_255_p3),64));
    zext_ln69_3_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_12_fu_410_p2),10));
    zext_ln69_4_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln69_3_fu_420_p2),64));
    zext_ln69_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0_reg_104),5));
end behav;
