-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    wt_i_V_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    wt_i_V_ce0 : OUT STD_LOGIC;
    wt_i_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kh_i_V_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    kh_i_V_ce0 : OUT STD_LOGIC;
    kh_i_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dmem_i_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    dmem_i_V_ce0 : OUT STD_LOGIC;
    dmem_i_V_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    dmem_o_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    dmem_o_V_ce0 : OUT STD_LOGIC;
    dmem_o_V_we0 : OUT STD_LOGIC;
    dmem_o_V_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    n_inputs_V : IN STD_LOGIC_VECTOR (15 downto 0);
    n_outputs_V : IN STD_LOGIC_VECTOR (15 downto 0);
    input_words_V : IN STD_LOGIC_VECTOR (15 downto 0);
    output_words_V : IN STD_LOGIC_VECTOR (15 downto 0);
    layer_mode_V : IN STD_LOGIC_VECTOR (2 downto 0);
    dmem_mode_V : IN STD_LOGIC_VECTOR (0 downto 0);
    width_mode_V : IN STD_LOGIC_VECTOR (1 downto 0);
    norm_mode_V : IN STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k70t-fbv676-1,HLS_INPUT_CLOCK=12.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.489286,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=61,HLS_SYN_DSP=1,HLS_SYN_FF=2645,HLS_SYN_LUT=12136,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv13_124A : STD_LOGIC_VECTOR (12 downto 0) := "1001001001010";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_925 : STD_LOGIC_VECTOR (12 downto 0) := "0100100100101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal kh_index_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal o_index_V : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal dmem_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dmem_V_ce0 : STD_LOGIC;
    signal dmem_V_we0 : STD_LOGIC;
    signal dmem_V_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dmem_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal wt_mem_V_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal wt_mem_V_ce0 : STD_LOGIC;
    signal wt_mem_V_we0 : STD_LOGIC;
    signal wt_mem_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kh_mem_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal kh_mem_V_ce0 : STD_LOGIC;
    signal kh_mem_V_we0 : STD_LOGIC;
    signal kh_mem_V_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_0701_0_reg_330 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0869_0_reg_341 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_0229_0_reg_352 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_0492_0_reg_363 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_0595_0_reg_374 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer_type_V_fu_454_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer_type_V_reg_910 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln792_fu_464_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln792_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln807_fu_478_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln807_reg_920 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_925 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln758_fu_492_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln758_reg_932 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_1_fu_496_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_1_reg_938 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_reg_946 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln769_fu_518_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln769_reg_954 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln879_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_reg_959 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln879_fu_538_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln879_reg_963 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln879_1_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_V_2_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ret_V_5_fu_564_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_5_reg_981 : STD_LOGIC_VECTOR (0 downto 0);
    signal ret_V_3_fu_568_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_3_reg_986 : STD_LOGIC_VECTOR (5 downto 0);
    signal ret_V_6_reg_991 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln180_fu_638_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln180_reg_1006 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln784_fu_666_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln784_1_fu_674_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln887_1_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_V_fu_723_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal add_ln180_1_fu_755_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln180_1_reg_1035 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln887_2_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_2_reg_1045 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state8_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_V_1_fu_776_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal zext_ln544_4_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_4_reg_1054 : STD_LOGIC_VECTOR (63 downto 0);
    signal nc_V_fu_829_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal nc_V_reg_1064 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal select_ln700_fu_837_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_bin_conv_fu_409_ap_ready : STD_LOGIC;
    signal grp_bin_conv_fu_409_ap_done : STD_LOGIC;
    signal ap_predicate_op171_call_state13 : BOOLEAN;
    signal ap_block_state13_on_subcall_done : BOOLEAN;
    signal add_ln700_fu_844_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal grp_fp_conv_fu_425_ap_ready : STD_LOGIC;
    signal grp_fp_conv_fu_425_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state8 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal grp_bin_conv_fu_409_ap_start : STD_LOGIC;
    signal grp_bin_conv_fu_409_ap_idle : STD_LOGIC;
    signal grp_bin_conv_fu_409_wt_mem_V_6_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bin_conv_fu_409_wt_mem_V_6_ce0 : STD_LOGIC;
    signal grp_bin_conv_fu_409_dmem_V_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bin_conv_fu_409_dmem_V_6_ce0 : STD_LOGIC;
    signal grp_bin_conv_fu_409_dmem_V_6_we0 : STD_LOGIC;
    signal grp_bin_conv_fu_409_dmem_V_6_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fp_conv_fu_425_ap_start : STD_LOGIC;
    signal grp_fp_conv_fu_425_ap_idle : STD_LOGIC;
    signal grp_fp_conv_fu_425_wt_mem_V_2_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fp_conv_fu_425_wt_mem_V_2_ce0 : STD_LOGIC;
    signal grp_fp_conv_fu_425_kh_mem_V_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fp_conv_fu_425_kh_mem_V_2_ce0 : STD_LOGIC;
    signal grp_fp_conv_fu_425_dmem_V_2_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fp_conv_fu_425_dmem_V_2_ce0 : STD_LOGIC;
    signal grp_fp_conv_fu_425_dmem_V_2_we0 : STD_LOGIC;
    signal grp_fp_conv_fu_425_dmem_V_2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_bin_dense_fu_440_ap_start : STD_LOGIC;
    signal grp_bin_dense_fu_440_ap_done : STD_LOGIC;
    signal grp_bin_dense_fu_440_ap_idle : STD_LOGIC;
    signal grp_bin_dense_fu_440_ap_ready : STD_LOGIC;
    signal grp_bin_dense_fu_440_wt_mem_V_4_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_bin_dense_fu_440_wt_mem_V_4_ce0 : STD_LOGIC;
    signal grp_bin_dense_fu_440_kh_mem_V_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_bin_dense_fu_440_kh_mem_V_4_ce0 : STD_LOGIC;
    signal grp_bin_dense_fu_440_dmem_V_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_bin_dense_fu_440_dmem_V_4_ce0 : STD_LOGIC;
    signal grp_bin_dense_fu_440_dmem_V_4_we0 : STD_LOGIC;
    signal grp_bin_dense_fu_440_dmem_V_4_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal kh_index_V_new_1_reg_385 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal n_outputs_V_pn_reg_396 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_bin_conv_fu_409_ap_start_reg : STD_LOGIC := '0';
    signal grp_fp_conv_fu_425_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_bin_dense_fu_440_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln544_3_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln544_2_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_2_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_1_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln180_5_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln544_1_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal zext_ln180_6_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln180_3_fu_860_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln700_6_fu_848_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal p_Result_s_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_510_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln769_1_fu_522_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal words_per_image_V_fu_526_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ret_V_9_fu_592_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ret_V_8_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_606_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln180_fu_611_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln180_fu_615_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ret_V_7_fu_560_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_625_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln180_2_fu_619_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln180_4_fu_634_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal img_off_V_fu_649_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln879_2_fu_655_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal img_idx_V_fu_660_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ret_V_4_fu_682_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_685_p5 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_700_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_733_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ret_V_fu_729_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln180_fu_747_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1372_fu_743_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln879_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln879_fu_792_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_fu_797_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_2_fu_811_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_V_1_fu_801_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln879_fu_821_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_853_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_condition_829 : BOOLEAN;

    component bin_conv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wt_mem_V_6_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        wt_mem_V_6_ce0 : OUT STD_LOGIC;
        wt_mem_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        nc_V : IN STD_LOGIC_VECTOR (15 downto 0);
        dmem_V_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        dmem_V_6_ce0 : OUT STD_LOGIC;
        dmem_V_6_we0 : OUT STD_LOGIC;
        dmem_V_6_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        dmem_V_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        d_i_idx_V : IN STD_LOGIC_VECTOR (0 downto 0);
        d_o_idx_V : IN STD_LOGIC_VECTOR (0 downto 0);
        o_index_V_6 : IN STD_LOGIC_VECTOR (15 downto 0);
        width_mode_V : IN STD_LOGIC_VECTOR (1 downto 0);
        norm_mode_V : IN STD_LOGIC_VECTOR (1 downto 0) );
    end component;


    component fp_conv IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wt_mem_V_2_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        wt_mem_V_2_ce0 : OUT STD_LOGIC;
        wt_mem_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        kh_mem_V_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        kh_mem_V_2_ce0 : OUT STD_LOGIC;
        kh_mem_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dmem_V_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        dmem_V_2_ce0 : OUT STD_LOGIC;
        dmem_V_2_we0 : OUT STD_LOGIC;
        dmem_V_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        dmem_V_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        d_i_idx_V : IN STD_LOGIC_VECTOR (0 downto 0);
        d_o_idx_V : IN STD_LOGIC_VECTOR (0 downto 0);
        kh_index_V_2 : IN STD_LOGIC_VECTOR (0 downto 0);
        o_index_V_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        N : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component bin_dense IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        wt_mem_V_4_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        wt_mem_V_4_ce0 : OUT STD_LOGIC;
        wt_mem_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        kh_mem_V_4_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        kh_mem_V_4_ce0 : OUT STD_LOGIC;
        kh_mem_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dmem_V_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        dmem_V_4_ce0 : OUT STD_LOGIC;
        dmem_V_4_we0 : OUT STD_LOGIC;
        dmem_V_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        dmem_V_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        layer_type_V : IN STD_LOGIC_VECTOR (1 downto 0);
        d_i_idx_V : IN STD_LOGIC_VECTOR (0 downto 0);
        d_o_idx_V : IN STD_LOGIC_VECTOR (0 downto 0);
        o_index_V_4 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component top_dmem_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_wt_mem_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_kh_mem_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    dmem_V_U : component top_dmem_V
    generic map (
        DataWidth => 64,
        AddressRange => 4096,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dmem_V_address0,
        ce0 => dmem_V_ce0,
        we0 => dmem_V_we0,
        d0 => dmem_V_d0,
        q0 => dmem_V_q0);

    wt_mem_V_U : component top_wt_mem_V
    generic map (
        DataWidth => 64,
        AddressRange => 4682,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => wt_mem_V_address0,
        ce0 => wt_mem_V_ce0,
        we0 => wt_mem_V_we0,
        d0 => wt_i_V_q0,
        q0 => wt_mem_V_q0);

    kh_mem_V_U : component top_kh_mem_V
    generic map (
        DataWidth => 64,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => kh_mem_V_address0,
        ce0 => kh_mem_V_ce0,
        we0 => kh_mem_V_we0,
        d0 => kh_i_V_q0,
        q0 => kh_mem_V_q0);

    grp_bin_conv_fu_409 : component bin_conv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bin_conv_fu_409_ap_start,
        ap_done => grp_bin_conv_fu_409_ap_done,
        ap_idle => grp_bin_conv_fu_409_ap_idle,
        ap_ready => grp_bin_conv_fu_409_ap_ready,
        wt_mem_V_6_address0 => grp_bin_conv_fu_409_wt_mem_V_6_address0,
        wt_mem_V_6_ce0 => grp_bin_conv_fu_409_wt_mem_V_6_ce0,
        wt_mem_V_6_q0 => wt_mem_V_q0,
        nc_V => nc_V_reg_1064,
        dmem_V_6_address0 => grp_bin_conv_fu_409_dmem_V_6_address0,
        dmem_V_6_ce0 => grp_bin_conv_fu_409_dmem_V_6_ce0,
        dmem_V_6_we0 => grp_bin_conv_fu_409_dmem_V_6_we0,
        dmem_V_6_d0 => grp_bin_conv_fu_409_dmem_V_6_d0,
        dmem_V_6_q0 => dmem_V_q0,
        d_i_idx_V => dmem_mode_V,
        d_o_idx_V => r_V_2_reg_946,
        o_index_V_6 => t_V_1_reg_938,
        width_mode_V => width_mode_V,
        norm_mode_V => norm_mode_V);

    grp_fp_conv_fu_425 : component fp_conv
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fp_conv_fu_425_ap_start,
        ap_done => grp_fp_conv_fu_425_ap_done,
        ap_idle => grp_fp_conv_fu_425_ap_idle,
        ap_ready => grp_fp_conv_fu_425_ap_ready,
        wt_mem_V_2_address0 => grp_fp_conv_fu_425_wt_mem_V_2_address0,
        wt_mem_V_2_ce0 => grp_fp_conv_fu_425_wt_mem_V_2_ce0,
        wt_mem_V_2_q0 => wt_mem_V_q0,
        kh_mem_V_2_address0 => grp_fp_conv_fu_425_kh_mem_V_2_address0,
        kh_mem_V_2_ce0 => grp_fp_conv_fu_425_kh_mem_V_2_ce0,
        kh_mem_V_2_q0 => kh_mem_V_q0,
        dmem_V_2_address0 => grp_fp_conv_fu_425_dmem_V_2_address0,
        dmem_V_2_ce0 => grp_fp_conv_fu_425_dmem_V_2_ce0,
        dmem_V_2_we0 => grp_fp_conv_fu_425_dmem_V_2_we0,
        dmem_V_2_d0 => grp_fp_conv_fu_425_dmem_V_2_d0,
        dmem_V_2_q0 => dmem_V_q0,
        d_i_idx_V => dmem_mode_V,
        d_o_idx_V => r_V_2_reg_946,
        kh_index_V_2 => t_V_reg_925,
        o_index_V_2 => t_V_1_reg_938,
        N => n_outputs_V);

    grp_bin_dense_fu_440 : component bin_dense
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_bin_dense_fu_440_ap_start,
        ap_done => grp_bin_dense_fu_440_ap_done,
        ap_idle => grp_bin_dense_fu_440_ap_idle,
        ap_ready => grp_bin_dense_fu_440_ap_ready,
        wt_mem_V_4_address0 => grp_bin_dense_fu_440_wt_mem_V_4_address0,
        wt_mem_V_4_ce0 => grp_bin_dense_fu_440_wt_mem_V_4_ce0,
        wt_mem_V_4_q0 => wt_mem_V_q0,
        kh_mem_V_4_address0 => grp_bin_dense_fu_440_kh_mem_V_4_address0,
        kh_mem_V_4_ce0 => grp_bin_dense_fu_440_kh_mem_V_4_ce0,
        kh_mem_V_4_q0 => kh_mem_V_q0,
        dmem_V_4_address0 => grp_bin_dense_fu_440_dmem_V_4_address0,
        dmem_V_4_ce0 => grp_bin_dense_fu_440_dmem_V_4_ce0,
        dmem_V_4_we0 => grp_bin_dense_fu_440_dmem_V_4_we0,
        dmem_V_4_d0 => grp_bin_dense_fu_440_dmem_V_4_d0,
        dmem_V_4_q0 => dmem_V_q0,
        layer_type_V => layer_type_V_reg_910,
        d_i_idx_V => dmem_mode_V,
        d_o_idx_V => r_V_2_reg_946,
        o_index_V_4 => t_V_1_reg_938);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state8))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bin_conv_fu_409_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bin_conv_fu_409_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_bin_conv_fu_409_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bin_conv_fu_409_ap_ready = ap_const_logic_1)) then 
                    grp_bin_conv_fu_409_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_bin_dense_fu_440_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_bin_dense_fu_440_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_0))) then 
                    grp_bin_dense_fu_440_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_bin_dense_fu_440_ap_ready = ap_const_logic_1)) then 
                    grp_bin_dense_fu_440_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fp_conv_fu_425_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fp_conv_fu_425_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln879_1_reg_968 = ap_const_lv1_1))) then 
                    grp_fp_conv_fu_425_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fp_conv_fu_425_ap_ready = ap_const_logic_1)) then 
                    grp_fp_conv_fu_425_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    kh_index_V_new_1_reg_385_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_bin_dense_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                kh_index_V_new_1_reg_385 <= zext_ln758_reg_932;
            elsif (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_1))) then 
                kh_index_V_new_1_reg_385 <= select_ln700_fu_837_p3;
            elsif (((grp_fp_conv_fu_425_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                kh_index_V_new_1_reg_385 <= add_ln700_fu_844_p2;
            end if; 
        end if;
    end process;

    n_outputs_V_pn_reg_396_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_1))) then 
                n_outputs_V_pn_reg_396 <= ap_const_lv16_1;
            elsif ((((grp_bin_dense_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((grp_fp_conv_fu_425_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)))) then 
                n_outputs_V_pn_reg_396 <= n_outputs_V;
            end if; 
        end if;
    end process;

    p_0229_0_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0))) then 
                p_0229_0_reg_352 <= i_V_2_fu_554_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0229_0_reg_352 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    p_0492_0_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_0492_0_reg_363 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_1_fu_717_p2 = ap_const_lv1_0))) then 
                p_0492_0_reg_363 <= i_V_fu_723_p2;
            end if; 
        end if;
    end process;

    p_0595_0_reg_374_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                p_0595_0_reg_374 <= ap_const_lv7_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln887_2_fu_770_p2 = ap_const_lv1_0))) then 
                p_0595_0_reg_374 <= i_V_1_fu_776_p2;
            end if; 
        end if;
    end process;

    p_0701_0_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0))) then 
                p_0701_0_reg_330 <= select_ln784_fu_666_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0701_0_reg_330 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    p_0869_0_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0))) then 
                p_0869_0_reg_341 <= select_ln784_1_fu_674_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_0869_0_reg_341 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_1_fu_717_p2 = ap_const_lv1_0))) then
                add_ln180_1_reg_1035 <= add_ln180_1_fu_755_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_1))) then
                add_ln180_reg_1006 <= add_ln180_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                icmp_ln879_1_reg_968 <= icmp_ln879_1_fu_542_p2;
                icmp_ln879_reg_959 <= icmp_ln879_fu_532_p2;
                layer_type_V_reg_910 <= layer_mode_V(2 downto 1);
                r_V_2_reg_946 <= r_V_2_fu_504_p2;
                t_V_1_reg_938 <= t_V_1_fu_496_p3;
                t_V_reg_925 <= t_V_fu_486_p2;
                trunc_ln792_reg_915 <= trunc_ln792_fu_464_p1;
                trunc_ln807_reg_920 <= trunc_ln807_fu_478_p1;
                    zext_ln758_reg_932(0) <= zext_ln758_fu_492_p1(0);
                    zext_ln769_reg_954(2 downto 1) <= zext_ln769_fu_518_p1(2 downto 1);
                    zext_ln879_reg_963(4 downto 0) <= zext_ln879_fu_538_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln887_1_reg_1026 <= icmp_ln887_1_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln887_2_reg_1045 <= icmp_ln887_2_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                kh_index_V <= kh_index_V_new_1_reg_385;
                o_index_V <= add_ln700_6_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                nc_V_reg_1064 <= nc_V_fu_829_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0))) then
                ret_V_3_reg_986 <= ret_V_3_fu_568_p1;
                ret_V_5_reg_981 <= ret_V_5_fu_564_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_0))) then
                ret_V_6_reg_991 <= p_0229_0_reg_352(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln887_2_fu_770_p2 = ap_const_lv1_0))) then
                    zext_ln544_4_reg_1054(6 downto 0) <= zext_ln544_4_fu_782_p1(6 downto 0);
            end if;
        end if;
    end process;
    zext_ln758_reg_932(15 downto 1) <= "000000000000000";
    zext_ln769_reg_954(0) <= '0';
    zext_ln769_reg_954(15 downto 3) <= "0000000000000";
    zext_ln879_reg_963(9 downto 5) <= "00000";
    zext_ln544_4_reg_1054(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln879_reg_959, icmp_ln879_1_reg_968, icmp_ln887_fu_548_p2, ap_enable_reg_pp0_iter0, icmp_ln887_1_fu_717_p2, ap_enable_reg_pp1_iter0, icmp_ln887_2_fu_770_p2, ap_enable_reg_pp2_iter0, ap_CS_fsm_state13, ap_block_state13_on_subcall_done, ap_CS_fsm_state14, grp_fp_conv_fu_425_ap_done, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, grp_bin_dense_fu_440_ap_done, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln887_fu_548_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln887_fu_548_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln887_1_fu_717_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln887_1_fu_717_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln887_2_fu_770_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln887_2_fu_770_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state11 => 
                if (((grp_bin_dense_fu_440_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((grp_fp_conv_fu_425_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln180_1_fu_755_p2 <= std_logic_vector(unsigned(select_ln180_fu_747_p3) + unsigned(zext_ln1372_fu_743_p1));
    add_ln180_2_fu_619_p2 <= std_logic_vector(unsigned(trunc_ln180_fu_611_p1) + unsigned(zext_ln180_fu_615_p1));
    add_ln180_fu_638_p2 <= std_logic_vector(unsigned(add_ln180_2_fu_619_p2) + unsigned(zext_ln180_4_fu_634_p1));
    add_ln700_6_fu_848_p2 <= std_logic_vector(unsigned(t_V_1_reg_938) + unsigned(n_outputs_V_pn_reg_396));
    add_ln700_fu_844_p2 <= std_logic_vector(unsigned(zext_ln758_reg_932) + unsigned(n_outputs_V));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state12 <= ap_CS_fsm(8);
    ap_CS_fsm_state13 <= ap_CS_fsm(9);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_on_subcall_done_assign_proc : process(grp_bin_conv_fu_409_ap_done, ap_predicate_op171_call_state13)
    begin
                ap_block_state13_on_subcall_done <= ((grp_bin_conv_fu_409_ap_done = ap_const_logic_0) and (ap_predicate_op171_call_state13 = ap_const_boolean_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_829_assign_proc : process(icmp_ln887_fu_548_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
                ap_condition_829 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln887_fu_548_p2)
    begin
        if ((icmp_ln887_fu_548_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln887_1_fu_717_p2)
    begin
        if ((icmp_ln887_1_fu_717_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state8_assign_proc : process(icmp_ln887_2_fu_770_p2)
    begin
        if ((icmp_ln887_2_fu_770_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op171_call_state13_assign_proc : process(icmp_ln879_reg_959, icmp_ln879_1_reg_968)
    begin
                ap_predicate_op171_call_state13 <= ((icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dmem_V_address0_assign_proc : process(icmp_ln879_reg_959, icmp_ln879_1_reg_968, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state13, ap_predicate_op171_call_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_enable_reg_pp0_iter1, grp_bin_conv_fu_409_dmem_V_6_address0, grp_fp_conv_fu_425_dmem_V_2_address0, grp_bin_dense_fu_440_dmem_V_4_address0, ap_CS_fsm_state11, ap_block_pp0_stage0, zext_ln180_2_fu_695_p1, zext_ln180_1_fu_708_p1, zext_ln180_5_fu_713_p1, zext_ln180_3_fu_860_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dmem_V_address0 <= zext_ln180_3_fu_860_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln879_reg_959 = ap_const_lv1_1))) then 
            dmem_V_address0 <= zext_ln180_5_fu_713_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln879_1_reg_968 = ap_const_lv1_1) and (icmp_ln879_reg_959 = ap_const_lv1_0))) then 
            dmem_V_address0 <= zext_ln180_1_fu_708_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_0))) then 
            dmem_V_address0 <= zext_ln180_2_fu_695_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dmem_V_address0 <= grp_bin_dense_fu_440_dmem_V_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dmem_V_address0 <= grp_fp_conv_fu_425_dmem_V_2_address0;
        elsif (((ap_predicate_op171_call_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            dmem_V_address0 <= grp_bin_conv_fu_409_dmem_V_6_address0;
        else 
            dmem_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dmem_V_ce0_assign_proc : process(icmp_ln879_reg_959, icmp_ln879_1_reg_968, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state13, ap_predicate_op171_call_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_enable_reg_pp0_iter1, grp_bin_conv_fu_409_dmem_V_6_ce0, grp_fp_conv_fu_425_dmem_V_2_ce0, grp_bin_dense_fu_440_dmem_V_4_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_reg_959 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_1_reg_968 = ap_const_lv1_1) and (icmp_ln879_reg_959 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_0)))) then 
            dmem_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dmem_V_ce0 <= grp_bin_dense_fu_440_dmem_V_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dmem_V_ce0 <= grp_fp_conv_fu_425_dmem_V_2_ce0;
        elsif (((ap_predicate_op171_call_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            dmem_V_ce0 <= grp_bin_conv_fu_409_dmem_V_6_ce0;
        else 
            dmem_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dmem_V_d0_assign_proc : process(dmem_i_V_q0, icmp_ln879_reg_959, icmp_ln879_1_reg_968, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state13, ap_predicate_op171_call_state13, ap_CS_fsm_state14, ap_enable_reg_pp0_iter1, grp_bin_conv_fu_409_dmem_V_6_d0, grp_fp_conv_fu_425_dmem_V_2_d0, grp_bin_dense_fu_440_dmem_V_4_d0, ap_CS_fsm_state11, ap_block_pp0_stage0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln879_reg_959 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln879_1_reg_968 = ap_const_lv1_1) and (icmp_ln879_reg_959 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_0)))) then 
            dmem_V_d0 <= dmem_i_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dmem_V_d0 <= grp_bin_dense_fu_440_dmem_V_4_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dmem_V_d0 <= grp_fp_conv_fu_425_dmem_V_2_d0;
        elsif (((ap_predicate_op171_call_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            dmem_V_d0 <= grp_bin_conv_fu_409_dmem_V_6_d0;
        else 
            dmem_V_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dmem_V_we0_assign_proc : process(icmp_ln879_reg_959, icmp_ln879_1_reg_968, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state13, ap_predicate_op171_call_state13, ap_CS_fsm_state14, ap_enable_reg_pp0_iter1, grp_bin_conv_fu_409_dmem_V_6_we0, grp_fp_conv_fu_425_dmem_V_2_we0, grp_bin_dense_fu_440_dmem_V_4_we0, ap_CS_fsm_state11)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_reg_959 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_1_reg_968 = ap_const_lv1_1) and (icmp_ln879_reg_959 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_0)))) then 
            dmem_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dmem_V_we0 <= grp_bin_dense_fu_440_dmem_V_4_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dmem_V_we0 <= grp_fp_conv_fu_425_dmem_V_2_we0;
        elsif (((ap_predicate_op171_call_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            dmem_V_we0 <= grp_bin_conv_fu_409_dmem_V_6_we0;
        else 
            dmem_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dmem_i_V_address0_assign_proc : process(icmp_ln879_reg_959, icmp_ln879_1_reg_968, zext_ln544_3_fu_582_p1, zext_ln544_2_fu_587_p1, zext_ln544_fu_644_p1, ap_condition_829)
    begin
        if ((ap_const_boolean_1 = ap_condition_829)) then
            if ((icmp_ln879_reg_959 = ap_const_lv1_1)) then 
                dmem_i_V_address0 <= zext_ln544_fu_644_p1(11 - 1 downto 0);
            elsif (((icmp_ln879_1_reg_968 = ap_const_lv1_1) and (icmp_ln879_reg_959 = ap_const_lv1_0))) then 
                dmem_i_V_address0 <= zext_ln544_2_fu_587_p1(11 - 1 downto 0);
            elsif (((icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_0))) then 
                dmem_i_V_address0 <= zext_ln544_3_fu_582_p1(11 - 1 downto 0);
            else 
                dmem_i_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            dmem_i_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    dmem_i_V_ce0_assign_proc : process(icmp_ln879_reg_959, icmp_ln879_1_reg_968, icmp_ln887_fu_548_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0) and (icmp_ln879_1_reg_968 = ap_const_lv1_1) and (icmp_ln879_reg_959 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln887_fu_548_p2 = ap_const_lv1_0) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_0)))) then 
            dmem_i_V_ce0 <= ap_const_logic_1;
        else 
            dmem_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dmem_o_V_address0 <= ap_const_lv64_0(7 - 1 downto 0);

    dmem_o_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dmem_o_V_ce0 <= ap_const_logic_1;
        else 
            dmem_o_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dmem_o_V_d0 <= dmem_V_q0;

    dmem_o_V_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dmem_o_V_we0 <= ap_const_logic_1;
        else 
            dmem_o_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_bin_conv_fu_409_ap_start <= grp_bin_conv_fu_409_ap_start_reg;
    grp_bin_dense_fu_440_ap_start <= grp_bin_dense_fu_440_ap_start_reg;
    grp_fp_conv_fu_425_ap_start <= grp_fp_conv_fu_425_ap_start_reg;
    i_V_1_fu_776_p2 <= std_logic_vector(unsigned(p_0595_0_reg_374) + unsigned(ap_const_lv7_1));
    i_V_2_fu_554_p2 <= std_logic_vector(unsigned(p_0229_0_reg_352) + unsigned(ap_const_lv7_1));
    i_V_fu_723_p2 <= std_logic_vector(unsigned(p_0492_0_reg_363) + unsigned(ap_const_lv13_1));
    icmp_ln879_1_fu_542_p2 <= "1" when (layer_type_V_fu_454_p4 = ap_const_lv2_0) else "0";
    icmp_ln879_2_fu_655_p2 <= "1" when (img_off_V_fu_649_p2 = zext_ln879_reg_963) else "0";
    icmp_ln879_fu_532_p2 <= "1" when (layer_type_V_fu_454_p4 = ap_const_lv2_1) else "0";
    icmp_ln887_1_fu_717_p2 <= "1" when (p_0492_0_reg_363 = ap_const_lv13_124A) else "0";
    icmp_ln887_2_fu_770_p2 <= "1" when (p_0595_0_reg_374 = ap_const_lv7_40) else "0";
    icmp_ln887_fu_548_p2 <= "1" when (p_0229_0_reg_352 = ap_const_lv7_40) else "0";
    img_idx_V_fu_660_p2 <= std_logic_vector(unsigned(p_0701_0_reg_330) + unsigned(ap_const_lv16_1));
    img_off_V_fu_649_p2 <= std_logic_vector(unsigned(p_0869_0_reg_341) + unsigned(ap_const_lv10_1));
    kh_i_V_address0 <= zext_ln544_4_fu_782_p1(6 - 1 downto 0);

    kh_i_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            kh_i_V_ce0 <= ap_const_logic_1;
        else 
            kh_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kh_mem_V_address0_assign_proc : process(icmp_ln879_reg_959, icmp_ln879_1_reg_968, ap_CS_fsm_pp2_stage0, zext_ln544_4_reg_1054, ap_CS_fsm_state14, ap_enable_reg_pp2_iter1, grp_fp_conv_fu_425_kh_mem_V_2_address0, grp_bin_dense_fu_440_kh_mem_V_4_address0, ap_CS_fsm_state11, ap_CS_fsm_state10, ap_block_pp2_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_1))) then 
            kh_mem_V_address0 <= ap_const_lv6_0;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            kh_mem_V_address0 <= zext_ln544_4_reg_1054(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            kh_mem_V_address0 <= grp_bin_dense_fu_440_kh_mem_V_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            kh_mem_V_address0 <= grp_fp_conv_fu_425_kh_mem_V_2_address0;
        else 
            kh_mem_V_address0 <= "XXXXXX";
        end if; 
    end process;


    kh_mem_V_ce0_assign_proc : process(icmp_ln879_reg_959, icmp_ln879_1_reg_968, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state14, ap_enable_reg_pp2_iter1, grp_fp_conv_fu_425_kh_mem_V_2_ce0, grp_bin_dense_fu_440_kh_mem_V_4_ce0, ap_CS_fsm_state11, ap_CS_fsm_state10)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln879_1_reg_968 = ap_const_lv1_0) and (icmp_ln879_reg_959 = ap_const_lv1_1)))) then 
            kh_mem_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            kh_mem_V_ce0 <= grp_bin_dense_fu_440_kh_mem_V_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            kh_mem_V_ce0 <= grp_fp_conv_fu_425_kh_mem_V_2_ce0;
        else 
            kh_mem_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kh_mem_V_we0_assign_proc : process(icmp_ln887_2_reg_1045, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln887_2_reg_1045 = ap_const_lv1_0))) then 
            kh_mem_V_we0 <= ap_const_logic_1;
        else 
            kh_mem_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer_type_V_fu_454_p4 <= layer_mode_V(2 downto 1);
    nc_V_fu_829_p3 <= 
        tmp_V_1_fu_801_p4 when (t_V_reg_925(0) = '1') else 
        select_ln879_fu_821_p3;
    or_ln879_fu_792_p2 <= (xor_ln879_fu_787_p2 or trunc_ln792_reg_915);
    p_Result_s_fu_468_p2 <= (trunc_ln792_fu_464_p1 xor ap_const_lv1_1);
    r_V_2_fu_504_p2 <= (dmem_mode_V xor ap_const_lv1_1);
    r_V_fu_606_p2 <= std_logic_vector(shift_left(unsigned(ret_V_8_fu_602_p1),to_integer(unsigned('0' & zext_ln769_reg_954(16-1 downto 0)))));
    ret_V_3_fu_568_p1 <= p_0229_0_reg_352(6 - 1 downto 0);
    ret_V_4_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_6_reg_991),7));
    ret_V_5_fu_564_p1 <= p_0229_0_reg_352(1 - 1 downto 0);
    ret_V_7_fu_560_p1 <= p_0701_0_reg_330(1 - 1 downto 0);
    ret_V_8_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_9_fu_592_p4),16));
    ret_V_9_fu_592_p4 <= p_0701_0_reg_330(15 downto 1);
    ret_V_fu_729_p1 <= p_0492_0_reg_363(1 - 1 downto 0);
    select_ln180_fu_747_p3 <= 
        ap_const_lv13_925 when (ret_V_fu_729_p1(0) = '1') else 
        ap_const_lv13_0;
    select_ln700_fu_837_p3 <= 
        ap_const_lv16_2 when (t_V_reg_925(0) = '1') else 
        ap_const_lv16_1;
    select_ln784_1_fu_674_p3 <= 
        ap_const_lv10_0 when (icmp_ln879_2_fu_655_p2(0) = '1') else 
        img_off_V_fu_649_p2;
    select_ln784_fu_666_p3 <= 
        img_idx_V_fu_660_p2 when (icmp_ln879_2_fu_655_p2(0) = '1') else 
        p_0701_0_reg_330;
    select_ln879_fu_821_p3 <= 
        tmp_V_fu_797_p1 when (or_ln879_fu_792_p2(0) = '1') else 
        tmp_V_2_fu_811_p4;
    shl_ln_fu_510_p3 <= (width_mode_V & ap_const_lv1_0);
    t_V_1_fu_496_p3 <= 
        ap_const_lv16_0 when (trunc_ln792_fu_464_p1(0) = '1') else 
        o_index_V;
    t_V_fu_486_p2 <= (trunc_ln807_fu_478_p1 and p_Result_s_fu_468_p2);
    tmp_3_fu_625_p4 <= ((dmem_mode_V & ret_V_7_fu_560_p1) & ap_const_lv10_0);
    tmp_4_fu_700_p4 <= ((dmem_mode_V & ap_const_lv5_0) & ret_V_3_reg_986);
    tmp_5_fu_685_p5 <= (((dmem_mode_V & ret_V_5_reg_981) & ap_const_lv3_0) & ret_V_4_fu_682_p1);
    tmp_6_fu_853_p3 <= (r_V_2_reg_946 & ap_const_lv11_0);
    tmp_7_fu_733_p4 <= p_0492_0_reg_363(12 downto 1);
    tmp_V_1_fu_801_p4 <= kh_mem_V_q0(31 downto 16);
    tmp_V_2_fu_811_p4 <= kh_mem_V_q0(63 downto 48);
    tmp_V_fu_797_p1 <= kh_mem_V_q0(16 - 1 downto 0);
    trunc_ln180_fu_611_p1 <= r_V_fu_606_p2(14 - 1 downto 0);
    trunc_ln792_fu_464_p1 <= layer_mode_V(1 - 1 downto 0);
    trunc_ln807_fu_478_p1 <= kh_index_V(1 - 1 downto 0);
    words_per_image_V_fu_526_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv5_1),to_integer(unsigned('0' & zext_ln769_1_fu_522_p1(5-1 downto 0)))));
    wt_i_V_address0 <= zext_ln544_1_fu_761_p1(13 - 1 downto 0);

    wt_i_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wt_i_V_ce0 <= ap_const_logic_1;
        else 
            wt_i_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wt_mem_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_state13, ap_predicate_op171_call_state13, ap_CS_fsm_state14, ap_enable_reg_pp1_iter1, grp_bin_conv_fu_409_wt_mem_V_6_address0, grp_fp_conv_fu_425_wt_mem_V_2_address0, grp_bin_dense_fu_440_wt_mem_V_4_address0, ap_CS_fsm_state11, ap_block_pp1_stage0, zext_ln180_6_fu_766_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wt_mem_V_address0 <= zext_ln180_6_fu_766_p1(13 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            wt_mem_V_address0 <= grp_bin_dense_fu_440_wt_mem_V_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            wt_mem_V_address0 <= grp_fp_conv_fu_425_wt_mem_V_2_address0;
        elsif (((ap_predicate_op171_call_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            wt_mem_V_address0 <= grp_bin_conv_fu_409_wt_mem_V_6_address0;
        else 
            wt_mem_V_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    wt_mem_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state13, ap_predicate_op171_call_state13, ap_CS_fsm_state14, ap_enable_reg_pp1_iter1, grp_bin_conv_fu_409_wt_mem_V_6_ce0, grp_fp_conv_fu_425_wt_mem_V_2_ce0, grp_bin_dense_fu_440_wt_mem_V_4_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            wt_mem_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            wt_mem_V_ce0 <= grp_bin_dense_fu_440_wt_mem_V_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            wt_mem_V_ce0 <= grp_fp_conv_fu_425_wt_mem_V_2_ce0;
        elsif (((ap_predicate_op171_call_state13 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            wt_mem_V_ce0 <= grp_bin_conv_fu_409_wt_mem_V_6_ce0;
        else 
            wt_mem_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    wt_mem_V_we0_assign_proc : process(icmp_ln887_1_reg_1026, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln887_1_reg_1026 = ap_const_lv1_0))) then 
            wt_mem_V_we0 <= ap_const_logic_1;
        else 
            wt_mem_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln879_fu_787_p2 <= (trunc_ln807_reg_920 xor ap_const_lv1_1);
    zext_ln1372_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_733_p4),13));
    zext_ln180_1_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_700_p4),64));
    zext_ln180_2_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_685_p5),64));
    zext_ln180_3_fu_860_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_853_p3),64));
    zext_ln180_4_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_625_p4),14));
    zext_ln180_5_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_reg_1006),64));
    zext_ln180_6_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln180_1_reg_1035),64));
    zext_ln180_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0869_0_reg_341),14));
    zext_ln544_1_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0492_0_reg_363),64));
    zext_ln544_2_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0229_0_reg_352),64));
    zext_ln544_3_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0229_0_reg_352),64));
    zext_ln544_4_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0595_0_reg_374),64));
    zext_ln544_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_0229_0_reg_352),64));
    zext_ln758_fu_492_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_fu_486_p2),16));
    zext_ln769_1_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_510_p3),5));
    zext_ln769_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_510_p3),16));
    zext_ln879_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(words_per_image_V_fu_526_p2),10));
end behav;
