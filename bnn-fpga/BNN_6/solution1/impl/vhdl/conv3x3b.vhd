-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv3x3b is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    line_buffer_m_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_m_V_ce0 : OUT STD_LOGIC;
    line_buffer_m_V_q0 : IN STD_LOGIC_VECTOR (1 downto 0);
    line_buffer_m_V_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    line_buffer_m_V_ce1 : OUT STD_LOGIC;
    line_buffer_m_V_q1 : IN STD_LOGIC_VECTOR (1 downto 0);
    line_buffer_m_V_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_0_0_s : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_0_0_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_0_1_s : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_0_1_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_0_2_s : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_0_2_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_1_0_s : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_1_0_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_1_1_s : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_1_1_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_1_2_s : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_1_2_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_2_0_s : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_2_0_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_2_1_s : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_2_1_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_2_2_s : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_2_2_10 : IN STD_LOGIC_VECTOR (0 downto 0);
    conv_params_m_V_offset : IN STD_LOGIC_VECTOR (0 downto 0);
    bank_V : IN STD_LOGIC_VECTOR (3 downto 0);
    cc_V : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of conv3x3b is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_A : STD_LOGIC_VECTOR (10 downto 0) := "00000001010";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv11_14 : STD_LOGIC_VECTOR (10 downto 0) := "00000010100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal cc_V_read_reg_941 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub_ln79_fu_343_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln79_reg_946 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_3_fu_349_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_3_reg_953 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_7_fu_370_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_7_reg_964 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_params_m_V_offs_reg_975 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln79_1_fu_385_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_1_reg_986 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_11_fu_497_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_11_reg_997 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln700_fu_511_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_reg_1008 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln79_5_fu_522_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_5_reg_1013 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal add_ln79_8_fu_536_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_8_reg_1023 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_11_fu_550_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_11_reg_1033 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln700_4_fu_658_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_4_reg_1038 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln700_5_fu_762_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_5_reg_1053 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_params_m_0_0_11_reg_1058 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_params_m_0_0_12_reg_1063 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_109_fu_803_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_109_reg_1073 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_111_fu_844_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_111_reg_1078 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_port_reg_conv_params_m_0_0_s : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_0_0_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_0_1_s : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_0_1_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_0_2_s : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_0_2_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_1_0_s : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_1_0_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_1_1_s : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_1_1_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_1_2_s : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_1_2_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_2_0_s : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_2_0_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_2_1_s : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_2_1_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_2_2_s : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_2_2_10 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_port_reg_conv_params_m_V_offset : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln79_4_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_8_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_5_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln79_12_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_9_fu_531_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln79_13_fu_545_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_6_fu_664_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln79_10_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_14_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal tmp_fu_297_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln79_fu_309_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln79_cast_fu_305_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln79_fu_313_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_94_fu_319_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_95_fu_331_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln79_1_fu_327_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_2_fu_339_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_3_fu_353_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1353_fu_364_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln79_6_fu_374_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_4_fu_390_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln215_fu_400_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_fu_404_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_96_fu_418_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_97_fu_432_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln215_1_fu_446_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_1_fu_450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_1_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_98_fu_464_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_1_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_478_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln1353_14_fu_492_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln79_9_fu_501_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln1353_fu_442_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln1353_1_fu_488_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln79_2_fu_517_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_7_fu_527_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_10_fu_541_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln215_2_fu_555_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_2_fu_559_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_2_fu_566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_fu_572_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_2_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_101_fu_586_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln215_3_fu_600_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_3_fu_604_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_3_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_102_fu_617_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_3_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_fu_631_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln79_fu_596_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln79_1_fu_641_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_3_fu_648_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln700_2_fu_654_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln700_1_fu_645_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln215_4_fu_672_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_4_fu_676_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_4_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_104_fu_689_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_4_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_105_fu_703_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln215_5_fu_717_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_5_fu_721_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_5_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_106_fu_734_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_5_fu_742_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_107_fu_748_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln79_2_fu_713_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln79_3_fu_758_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln215_6_fu_772_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_6_fu_776_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_6_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_108_fu_789_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_6_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln215_7_fu_813_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_7_fu_817_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_7_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_110_fu_830_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_7_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln215_8_fu_860_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln215_8_fu_864_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln1355_8_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_112_fu_875_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln841_8_fu_883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_889_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln79_5_fu_857_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln700_fu_899_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln700_6_fu_909_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln700_5_fu_915_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln79_4_fu_854_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln700_7_fu_919_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln700_6_fu_925_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln700_4_fu_906_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln700_8_fu_929_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln700_3_fu_903_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln700_4_reg_1038 <= add_ln700_4_fu_658_p2;
                add_ln79_11_reg_1033 <= add_ln79_11_fu_550_p2;
                add_ln79_5_reg_1013 <= add_ln79_5_fu_522_p2;
                add_ln79_8_reg_1023 <= add_ln79_8_fu_536_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                add_ln700_5_reg_1053 <= add_ln700_5_fu_762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln700_reg_1008 <= add_ln700_fu_511_p2;
                    add_ln79_1_reg_986(10 downto 1) <= add_ln79_1_fu_385_p2(10 downto 1);
                conv_params_m_V_offs_reg_975 <= ap_port_reg_conv_params_m_V_offset;
                    zext_ln79_11_reg_997(3 downto 0) <= zext_ln79_11_fu_497_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_port_reg_conv_params_m_0_0_10 <= conv_params_m_0_0_10;
                ap_port_reg_conv_params_m_0_0_s <= conv_params_m_0_0_s;
                ap_port_reg_conv_params_m_0_1_10 <= conv_params_m_0_1_10;
                ap_port_reg_conv_params_m_0_1_s <= conv_params_m_0_1_s;
                ap_port_reg_conv_params_m_0_2_10 <= conv_params_m_0_2_10;
                ap_port_reg_conv_params_m_0_2_s <= conv_params_m_0_2_s;
                ap_port_reg_conv_params_m_1_0_10 <= conv_params_m_1_0_10;
                ap_port_reg_conv_params_m_1_0_s <= conv_params_m_1_0_s;
                ap_port_reg_conv_params_m_1_1_10 <= conv_params_m_1_1_10;
                ap_port_reg_conv_params_m_1_1_s <= conv_params_m_1_1_s;
                ap_port_reg_conv_params_m_1_2_10 <= conv_params_m_1_2_10;
                ap_port_reg_conv_params_m_1_2_s <= conv_params_m_1_2_s;
                ap_port_reg_conv_params_m_2_0_10 <= conv_params_m_2_0_10;
                ap_port_reg_conv_params_m_2_0_s <= conv_params_m_2_0_s;
                ap_port_reg_conv_params_m_2_1_10 <= conv_params_m_2_1_10;
                ap_port_reg_conv_params_m_2_1_s <= conv_params_m_2_1_s;
                ap_port_reg_conv_params_m_2_2_10 <= conv_params_m_2_2_10;
                ap_port_reg_conv_params_m_2_2_s <= conv_params_m_2_2_s;
                ap_port_reg_conv_params_m_V_offset <= conv_params_m_V_offset;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                cc_V_read_reg_941 <= cc_V;
                    sub_ln79_reg_946(10 downto 1) <= sub_ln79_fu_343_p2(10 downto 1);
                    zext_ln79_3_reg_953(3 downto 0) <= zext_ln79_3_fu_349_p1(3 downto 0);
                    zext_ln79_7_reg_964(3 downto 0) <= zext_ln79_7_fu_370_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                conv_params_m_0_0_11_reg_1058 <= ap_port_reg_conv_params_m_0_0_10;
                conv_params_m_0_0_12_reg_1063 <= ap_port_reg_conv_params_m_0_0_s;
                tmp_109_reg_1073 <= tmp_109_fu_803_p4;
                tmp_111_reg_1078 <= tmp_111_fu_844_p4;
            end if;
        end if;
    end process;
    sub_ln79_reg_946(0) <= '0';
    zext_ln79_3_reg_953(10 downto 4) <= "0000000";
    zext_ln79_7_reg_964(10 downto 4) <= "0000000";
    add_ln79_1_reg_986(0) <= '0';
    zext_ln79_11_reg_997(10 downto 4) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln1353_14_fu_492_p2 <= std_logic_vector(unsigned(ap_const_lv4_2) + unsigned(cc_V_read_reg_941));
    add_ln1353_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(cc_V));
    add_ln700_3_fu_648_p2 <= std_logic_vector(signed(sext_ln79_fu_596_p1) + signed(sext_ln79_1_fu_641_p1));
    add_ln700_4_fu_658_p2 <= std_logic_vector(signed(sext_ln700_2_fu_654_p1) + signed(sext_ln700_1_fu_645_p1));
    add_ln700_5_fu_762_p2 <= std_logic_vector(signed(sext_ln79_2_fu_713_p1) + signed(sext_ln79_3_fu_758_p1));
    add_ln700_6_fu_909_p2 <= std_logic_vector(signed(sext_ln79_5_fu_857_p1) + signed(sext_ln700_fu_899_p1));
    add_ln700_7_fu_919_p2 <= std_logic_vector(signed(sext_ln700_5_fu_915_p1) + signed(sext_ln79_4_fu_854_p1));
    add_ln700_8_fu_929_p2 <= std_logic_vector(signed(sext_ln700_6_fu_925_p1) + signed(sext_ln700_4_fu_906_p1));
    add_ln700_fu_511_p2 <= std_logic_vector(signed(sext_ln1353_fu_442_p1) + signed(sext_ln1353_1_fu_488_p1));
    add_ln79_10_fu_541_p2 <= std_logic_vector(unsigned(zext_ln79_11_reg_997) + unsigned(add_ln79_1_reg_986));
    add_ln79_11_fu_550_p2 <= std_logic_vector(unsigned(zext_ln79_11_reg_997) + unsigned(add_ln79_2_fu_517_p2));
    add_ln79_1_fu_385_p2 <= std_logic_vector(unsigned(ap_const_lv11_A) + unsigned(sub_ln79_reg_946));
    add_ln79_2_fu_517_p2 <= std_logic_vector(unsigned(ap_const_lv11_14) + unsigned(sub_ln79_reg_946));
    add_ln79_3_fu_353_p2 <= std_logic_vector(unsigned(zext_ln79_3_fu_349_p1) + unsigned(sub_ln79_fu_343_p2));
    add_ln79_4_fu_390_p2 <= std_logic_vector(unsigned(zext_ln79_3_reg_953) + unsigned(add_ln79_1_fu_385_p2));
    add_ln79_5_fu_522_p2 <= std_logic_vector(unsigned(zext_ln79_3_reg_953) + unsigned(add_ln79_2_fu_517_p2));
    add_ln79_6_fu_374_p2 <= std_logic_vector(unsigned(zext_ln79_7_fu_370_p1) + unsigned(sub_ln79_fu_343_p2));
    add_ln79_7_fu_527_p2 <= std_logic_vector(unsigned(zext_ln79_7_reg_964) + unsigned(add_ln79_1_reg_986));
    add_ln79_8_fu_536_p2 <= std_logic_vector(unsigned(zext_ln79_7_reg_964) + unsigned(add_ln79_2_fu_517_p2));
    add_ln79_9_fu_501_p2 <= std_logic_vector(unsigned(zext_ln79_11_fu_497_p1) + unsigned(sub_ln79_reg_946));
    add_ln79_fu_313_p2 <= std_logic_vector(unsigned(zext_ln79_fu_309_p1) + unsigned(zext_ln79_cast_fu_305_p1));
    and_ln1355_1_fu_458_p2 <= (trunc_ln215_1_fu_446_p1 and select_ln215_1_fu_450_p3);
    and_ln1355_2_fu_566_p2 <= (trunc_ln215_2_fu_555_p1 and select_ln215_2_fu_559_p3);
    and_ln1355_3_fu_611_p2 <= (trunc_ln215_3_fu_600_p1 and select_ln215_3_fu_604_p3);
    and_ln1355_4_fu_683_p2 <= (trunc_ln215_4_fu_672_p1 and select_ln215_4_fu_676_p3);
    and_ln1355_5_fu_728_p2 <= (trunc_ln215_5_fu_717_p1 and select_ln215_5_fu_721_p3);
    and_ln1355_6_fu_783_p2 <= (trunc_ln215_6_fu_772_p1 and select_ln215_6_fu_776_p3);
    and_ln1355_7_fu_824_p2 <= (trunc_ln215_7_fu_813_p1 and select_ln215_7_fu_817_p3);
    and_ln1355_8_fu_869_p2 <= (trunc_ln215_8_fu_860_p1 and select_ln215_8_fu_864_p3);
    and_ln1355_fu_412_p2 <= (trunc_ln215_fu_400_p1 and select_ln215_fu_404_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage4_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(unsigned(add_ln700_8_fu_929_p2) + unsigned(sext_ln700_3_fu_903_p1));

    line_buffer_m_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln79_4_fu_359_p1, ap_block_pp0_stage1, zext_ln79_12_fu_506_p1, zext_ln79_9_fu_531_p1, ap_block_pp0_stage2, zext_ln79_6_fu_664_p1, ap_block_pp0_stage3, zext_ln79_14_fu_768_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                line_buffer_m_V_address0 <= zext_ln79_14_fu_768_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                line_buffer_m_V_address0 <= zext_ln79_6_fu_664_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                line_buffer_m_V_address0 <= zext_ln79_9_fu_531_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buffer_m_V_address0 <= zext_ln79_12_fu_506_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                line_buffer_m_V_address0 <= zext_ln79_4_fu_359_p1(10 - 1 downto 0);
            else 
                line_buffer_m_V_address0 <= "XXXXXXXXXX";
            end if;
        else 
            line_buffer_m_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    line_buffer_m_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, zext_ln79_8_fu_380_p1, zext_ln79_5_fu_395_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln79_13_fu_545_p1, ap_block_pp0_stage3, zext_ln79_10_fu_668_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                line_buffer_m_V_address1 <= zext_ln79_10_fu_668_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                line_buffer_m_V_address1 <= zext_ln79_13_fu_545_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                line_buffer_m_V_address1 <= zext_ln79_5_fu_395_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                line_buffer_m_V_address1 <= zext_ln79_8_fu_380_p1(10 - 1 downto 0);
            else 
                line_buffer_m_V_address1 <= "XXXXXXXXXX";
            end if;
        else 
            line_buffer_m_V_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    line_buffer_m_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_m_V_ce0 <= ap_const_logic_1;
        else 
            line_buffer_m_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    line_buffer_m_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            line_buffer_m_V_ce1 <= ap_const_logic_1;
        else 
            line_buffer_m_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln215_1_fu_450_p3 <= 
        ap_port_reg_conv_params_m_2_1_10 when (ap_port_reg_conv_params_m_V_offset(0) = '1') else 
        ap_port_reg_conv_params_m_2_1_s;
    select_ln215_2_fu_559_p3 <= 
        ap_port_reg_conv_params_m_2_0_10 when (conv_params_m_V_offs_reg_975(0) = '1') else 
        ap_port_reg_conv_params_m_2_0_s;
    select_ln215_3_fu_604_p3 <= 
        ap_port_reg_conv_params_m_1_2_10 when (conv_params_m_V_offs_reg_975(0) = '1') else 
        ap_port_reg_conv_params_m_1_2_s;
    select_ln215_4_fu_676_p3 <= 
        ap_port_reg_conv_params_m_1_1_10 when (conv_params_m_V_offs_reg_975(0) = '1') else 
        ap_port_reg_conv_params_m_1_1_s;
    select_ln215_5_fu_721_p3 <= 
        ap_port_reg_conv_params_m_1_0_10 when (conv_params_m_V_offs_reg_975(0) = '1') else 
        ap_port_reg_conv_params_m_1_0_s;
    select_ln215_6_fu_776_p3 <= 
        ap_port_reg_conv_params_m_0_2_10 when (conv_params_m_V_offs_reg_975(0) = '1') else 
        ap_port_reg_conv_params_m_0_2_s;
    select_ln215_7_fu_817_p3 <= 
        ap_port_reg_conv_params_m_0_1_10 when (conv_params_m_V_offs_reg_975(0) = '1') else 
        ap_port_reg_conv_params_m_0_1_s;
    select_ln215_8_fu_864_p3 <= 
        conv_params_m_0_0_11_reg_1058 when (conv_params_m_V_offs_reg_975(0) = '1') else 
        conv_params_m_0_0_12_reg_1063;
    select_ln215_fu_404_p3 <= 
        ap_port_reg_conv_params_m_2_2_10 when (ap_port_reg_conv_params_m_V_offset(0) = '1') else 
        ap_port_reg_conv_params_m_2_2_s;
        sext_ln1353_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_99_fu_478_p4),3));

        sext_ln1353_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_97_fu_432_p4),3));

        sext_ln700_1_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln700_reg_1008),4));

        sext_ln700_2_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln700_3_fu_648_p2),4));

        sext_ln700_3_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln700_4_reg_1038),5));

        sext_ln700_4_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln700_5_reg_1053),5));

        sext_ln700_5_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln700_6_fu_909_p2),4));

        sext_ln700_6_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln700_7_fu_919_p2),5));

        sext_ln700_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_113_fu_889_p4),3));

        sext_ln79_1_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_103_fu_631_p4),3));

        sext_ln79_2_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_105_fu_703_p4),3));

        sext_ln79_3_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_107_fu_748_p4),3));

        sext_ln79_4_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_109_reg_1073),4));

        sext_ln79_5_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_111_reg_1078),3));

        sext_ln79_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_101_fu_586_p4),3));

    sub_ln79_fu_343_p2 <= std_logic_vector(unsigned(zext_ln79_1_fu_327_p1) - unsigned(zext_ln79_2_fu_339_p1));
    tmp_100_fu_572_p3 <= line_buffer_m_V_q0(1 downto 1);
    
    tmp_101_fu_586_p4_proc : process(line_buffer_m_V_q0, xor_ln841_2_fu_580_p2)
    begin
        tmp_101_fu_586_p4 <= line_buffer_m_V_q0;
        tmp_101_fu_586_p4(1) <= xor_ln841_2_fu_580_p2(0);
    end process;

    tmp_102_fu_617_p3 <= line_buffer_m_V_q1(1 downto 1);
    
    tmp_103_fu_631_p4_proc : process(line_buffer_m_V_q1, xor_ln841_3_fu_625_p2)
    begin
        tmp_103_fu_631_p4 <= line_buffer_m_V_q1;
        tmp_103_fu_631_p4(1) <= xor_ln841_3_fu_625_p2(0);
    end process;

    tmp_104_fu_689_p3 <= line_buffer_m_V_q0(1 downto 1);
    
    tmp_105_fu_703_p4_proc : process(line_buffer_m_V_q0, xor_ln841_4_fu_697_p2)
    begin
        tmp_105_fu_703_p4 <= line_buffer_m_V_q0;
        tmp_105_fu_703_p4(1) <= xor_ln841_4_fu_697_p2(0);
    end process;

    tmp_106_fu_734_p3 <= line_buffer_m_V_q1(1 downto 1);
    
    tmp_107_fu_748_p4_proc : process(line_buffer_m_V_q1, xor_ln841_5_fu_742_p2)
    begin
        tmp_107_fu_748_p4 <= line_buffer_m_V_q1;
        tmp_107_fu_748_p4(1) <= xor_ln841_5_fu_742_p2(0);
    end process;

    tmp_108_fu_789_p3 <= line_buffer_m_V_q0(1 downto 1);
    
    tmp_109_fu_803_p4_proc : process(line_buffer_m_V_q0, xor_ln841_6_fu_797_p2)
    begin
        tmp_109_fu_803_p4 <= line_buffer_m_V_q0;
        tmp_109_fu_803_p4(1) <= xor_ln841_6_fu_797_p2(0);
    end process;

    tmp_110_fu_830_p3 <= line_buffer_m_V_q1(1 downto 1);
    
    tmp_111_fu_844_p4_proc : process(line_buffer_m_V_q1, xor_ln841_7_fu_838_p2)
    begin
        tmp_111_fu_844_p4 <= line_buffer_m_V_q1;
        tmp_111_fu_844_p4(1) <= xor_ln841_7_fu_838_p2(0);
    end process;

    tmp_112_fu_875_p3 <= line_buffer_m_V_q0(1 downto 1);
    
    tmp_113_fu_889_p4_proc : process(line_buffer_m_V_q0, xor_ln841_8_fu_883_p2)
    begin
        tmp_113_fu_889_p4 <= line_buffer_m_V_q0;
        tmp_113_fu_889_p4(1) <= xor_ln841_8_fu_883_p2(0);
    end process;

    tmp_94_fu_319_p3 <= (add_ln79_fu_313_p2 & ap_const_lv5_0);
    tmp_95_fu_331_p3 <= (add_ln79_fu_313_p2 & ap_const_lv1_0);
    tmp_96_fu_418_p3 <= line_buffer_m_V_q0(1 downto 1);
    
    tmp_97_fu_432_p4_proc : process(line_buffer_m_V_q0, xor_ln841_fu_426_p2)
    begin
        tmp_97_fu_432_p4 <= line_buffer_m_V_q0;
        tmp_97_fu_432_p4(1) <= xor_ln841_fu_426_p2(0);
    end process;

    tmp_98_fu_464_p3 <= line_buffer_m_V_q1(1 downto 1);
    
    tmp_99_fu_478_p4_proc : process(line_buffer_m_V_q1, xor_ln841_1_fu_472_p2)
    begin
        tmp_99_fu_478_p4 <= line_buffer_m_V_q1;
        tmp_99_fu_478_p4(1) <= xor_ln841_1_fu_472_p2(0);
    end process;

    tmp_fu_297_p3 <= (line_buffer_m_V_offset & ap_const_lv3_0);
    trunc_ln215_1_fu_446_p1 <= line_buffer_m_V_q1(1 - 1 downto 0);
    trunc_ln215_2_fu_555_p1 <= line_buffer_m_V_q0(1 - 1 downto 0);
    trunc_ln215_3_fu_600_p1 <= line_buffer_m_V_q1(1 - 1 downto 0);
    trunc_ln215_4_fu_672_p1 <= line_buffer_m_V_q0(1 - 1 downto 0);
    trunc_ln215_5_fu_717_p1 <= line_buffer_m_V_q1(1 - 1 downto 0);
    trunc_ln215_6_fu_772_p1 <= line_buffer_m_V_q0(1 - 1 downto 0);
    trunc_ln215_7_fu_813_p1 <= line_buffer_m_V_q1(1 - 1 downto 0);
    trunc_ln215_8_fu_860_p1 <= line_buffer_m_V_q0(1 - 1 downto 0);
    trunc_ln215_fu_400_p1 <= line_buffer_m_V_q0(1 - 1 downto 0);
    xor_ln841_1_fu_472_p2 <= (tmp_98_fu_464_p3 xor and_ln1355_1_fu_458_p2);
    xor_ln841_2_fu_580_p2 <= (tmp_100_fu_572_p3 xor and_ln1355_2_fu_566_p2);
    xor_ln841_3_fu_625_p2 <= (tmp_102_fu_617_p3 xor and_ln1355_3_fu_611_p2);
    xor_ln841_4_fu_697_p2 <= (tmp_104_fu_689_p3 xor and_ln1355_4_fu_683_p2);
    xor_ln841_5_fu_742_p2 <= (tmp_106_fu_734_p3 xor and_ln1355_5_fu_728_p2);
    xor_ln841_6_fu_797_p2 <= (tmp_108_fu_789_p3 xor and_ln1355_6_fu_783_p2);
    xor_ln841_7_fu_838_p2 <= (tmp_110_fu_830_p3 xor and_ln1355_7_fu_824_p2);
    xor_ln841_8_fu_883_p2 <= (tmp_112_fu_875_p3 xor and_ln1355_8_fu_869_p2);
    xor_ln841_fu_426_p2 <= (tmp_96_fu_418_p3 xor and_ln1355_fu_412_p2);
    zext_ln79_10_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_8_reg_1023),64));
    zext_ln79_11_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_14_fu_492_p2),11));
    zext_ln79_12_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_9_fu_501_p2),64));
    zext_ln79_13_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_10_fu_541_p2),64));
    zext_ln79_14_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_11_reg_1033),64));
    zext_ln79_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_319_p3),11));
    zext_ln79_2_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_331_p3),11));
    zext_ln79_3_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cc_V),11));
    zext_ln79_4_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_3_fu_353_p2),64));
    zext_ln79_5_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_4_fu_390_p2),64));
    zext_ln79_6_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_5_reg_1013),64));
    zext_ln79_7_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1353_fu_364_p2),11));
    zext_ln79_8_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_6_fu_374_p2),64));
    zext_ln79_9_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_7_fu_527_p2),64));
    zext_ln79_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_297_p3),5));
    zext_ln79_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bank_V),5));
end behav;
